(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{500:function(t,a,s){"use strict";s.r(a);var e=s(65),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-git-历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-历史"}},[t._v("#")]),t._v(" 1.Git 历史")]),t._v(" "),s("p",[t._v("同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。到 2002 年，整个项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。")]),t._v(" "),s("p",[t._v("到 2005 年的时候，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统订了若干目标：")]),t._v(" "),s("p",[t._v("1、速度快\n2、简单的设计\n3、对非线性开发模式的强力支持（允许上千个并行开发的分支）\n4、完全分布式\n5、有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）")]),t._v(" "),s("h2",{attrs:{id:"_2-git-的安装与配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-的安装与配置"}},[t._v("#")]),t._v(" 2. Git 的安装与配置")]),t._v(" "),s("h3",{attrs:{id:"_2-1-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-安装"}},[t._v("#")]),t._v(" 2.1 安装")]),t._v(" "),s("p",[t._v("官网下载](https://git-scm.com/downloads)")]),t._v(" "),s("h3",{attrs:{id:"_2-2-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-配置"}},[t._v("#")]),t._v(" 2.2 配置")]),t._v(" "),s("p",[t._v("1、当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中。如下全局设置")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<用户名>"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<邮箱>"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default simple  \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.editor notepad   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果你想使用一个不同的文本编辑器")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config -l "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###查看全局配置")]),t._v("\n")])])]),s("p",[t._v("这些信息写到全局配置文件通常在【C:\\Users\\Administrator.gitconfig】，Administrator不同电脑可能有所区别，重申一遍，你只需要做一次这个设置。如果你传递了 --global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要--global选项")]),t._v(" "),s("blockquote",[s("p",[t._v("push.default  simple：Git 2.x 默认的是 simple，意味着执行 git push 没有指定分支时，只有当前分支会被 push 到你使用 git pull 获取的代码")]),t._v(" "),s("p",[t._v("push.default  matching： Git 1.x 的默认行为，其意是如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支")])]),t._v(" "),s("p",[t._v("2、在使用 git 之前创建 SSH Key，未来会使用到：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("ssh-keygen -t rsa -b "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v(" -C "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"备注"')]),t._v("\n\n一路回车\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/.ssh/id_rsa.pub\n")])])]),s("p",[t._v("默认在C:\\Users\\Administrator\\.ssh目录下生成密钥对")]),t._v(" "),s("h2",{attrs:{id:"_3-gitkraken"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-gitkraken"}},[t._v("#")]),t._v(" 3. GitKraken")]),t._v(" "),s("h3",{attrs:{id:"_3-1-安装与破解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-安装与破解"}},[t._v("#")]),t._v(" 3.1 安装与破解")]),t._v(" "),s("p",[t._v("GitKraken 是 Git 客户端界的后起之秀，它的出现打破了『SourceTree 最好用』的说法。不少 SourceTree 的用户从 SourceTree 上迁移到了 GitKraken 。GitKranken 的特点在于，界面更简洁、友好，这样在保证功能不少的情况下，上手比 SourceTree 更快。")]),t._v(" "),s("p",[t._v("GitKranken 比 SourceTree 还有一个有优势之处：它跨平台，在 Linux 上可用。")]),t._v(" "),s("p",[t._v("不过，GitKraken 从 "),s("strong",[t._v("6.5.3")]),t._v(" 版本开始收费，它的最后一个免费版本是 "),s("strong",[t._v("6.5.1")]),t._v(" ，当你使用收费版本而又未付费时，使用 GitKranken 将无法打开本地仓库，这就约等于无法使用了。")]),t._v(" "),s("p",[t._v("对于这个问题解决的办法自然就是破解："),s("strong",[t._v("使用一个可免费试用的低版本，并且关闭它的自动升级功能")])]),t._v(" "),s("p",[t._v("下载（或向老师要）6.5.1 的 GitKraken 安装程序")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://release.axocdn.com/linux/GitKraken-v6.5.1.deb\nhttps://release.axocdn.com/linux/GitKraken-v6.5.1.rpm\nhttps://release.axocdn.com/linux/GitKraken-v6.5.1.tar.gz\nhttps://release.axocdn.com/win64/GitKrakenSetup-6.5.1.exe\n")])])]),s("p",[t._v("安装过程一路 Next，没有特殊之处。")]),t._v(" "),s("p",[t._v("注意")]),t._v(" "),s("blockquote",[s("p",[t._v("安装程序 GitKrakenSetup-6.5.1.exe 只用执行一次，别傻了吧唧地反复点击、运行它。导致，后面 “update.exe 怎么删不掉？” 情况地出现！")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-破解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-破解"}},[t._v("#")]),t._v(" 3.2. 破解")]),t._v(" "),s("p",[t._v("理论上，安装 GitKraken 6.5.1 版之后直接使用就可以，但是，讨厌的是 GitKraken 会『"),s("strong",[t._v("自动升级")]),t._v("』。一旦自动升级，你的 GitKraken 自然就不再是最后一个免费版 6.5.1 了。")]),t._v(" "),s("p",[t._v("GitKraken “做手脚” 的地方就在于："),s("strong",[t._v("正常安装之后，你桌面生成的 GitKraken 的快捷方式链接到的是 GitKranken 安装程序的 "),s("code",[t._v("update.exe")])]),t._v("！所以，你通过点击快捷方式运行GitKraken 时，它总会先检查服务器上是否有新版本可以升级！如果有，GitKraken 就会下载最新本版，自我更新。")]),t._v(" "),s("p",[t._v("所以，破解的关键在于："),s("strong",[t._v("干掉 update.exe ，让 GitKraken 无法升级，定死再 6.5.1 版本")])]),t._v(" "),s("p",[t._v("在安装 GitKraken 之后，在你的安装目录（C:\\Users\\Administrator\\AppData\\Local\\gitkraken）下会有一个名为 Update.exe的可执行程序")]),t._v(" "),s("p",[t._v("1、这个文件就是 GitKraken 运行期间『悄悄』访问的服务器的进程。将它删除（或逻辑上删除，例如改名为 "),s("em",[t._v("Update.exe.bak")]),t._v(" 这种无法启动的文件名），这样 GitKraken 也无法获取最新的版本信息，进而无法自我更新")]),t._v(" "),s("p",[t._v("处理完 update.exe 的问题之后，在 update.exe 的同级的 app-6.5.1 目录下找到 gitkraken.exe，通过它来启动 GitKraken\n"),s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228152948920.png",alt:"image-20211228152948920"}})]),t._v(" "),s("p",[t._v("2、然后右键桌面gitkraken.exe的快捷方式图标，将目标改为：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228153122224.png",alt:"image-20211228153122224"}})]),t._v(" "),s("p",[t._v("3、打开windows的注册表， 在：计算机\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell下面找到 GitKraken ，删除这个目录")]),t._v(" "),s("h2",{attrs:{id:"_4-git基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-git基础"}},[t._v("#")]),t._v(" 4.git基础")]),t._v(" "),s("h3",{attrs:{id:"_4-1-什么是版本控制系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-什么是版本控制系统"}},[t._v("#")]),t._v(" 4.1. 什么是版本控制系统")]),t._v(" "),s("p",[t._v("版本控制系统（VCS）是将『"),s("strong",[t._v("什么时候、谁、对什么文件做了怎样的修改")]),t._v("』这样的信息以版本的形式保存并进行管理的系统，简单来说，版本控制系统会去记录它所管理的文件的『"),s("strong",[t._v("历史版本")]),t._v("』")]),t._v(" "),s("p",[t._v("版本控制系统 “不是网盘，而胜似网盘” ：")]),t._v(" "),s("ul",[s("li",[t._v("它和网盘的相同点在于：它可以位于局域网，或者是外网上的一台服务器上，你和你的小伙伴们可以在不同的地方、不同的电脑上，以它为 “中介、桥梁” 共享文件。")]),t._v(" "),s("li",[t._v("它胜似网盘的地方在于：它能记录你和你的小伙伴们对文件修改的所有历史版本，并且你可以将你的文件恢复到你感兴趣的某个历史版本。")])]),t._v(" "),s("p",[t._v("Git 并非唯一的版本控制系统，它的前辈是 Subversion 。2014 年 Git 的市场占有率首次超过 Subversion ，成为主流。")]),t._v(" "),s("p",[t._v("Git 相较于 SVN的先进之处在于：")]),t._v(" "),s("p",[t._v("1、Subversion 中的版本信息仅存在于中央仓库，而 Git 中所有的本地库中都有完整的历史版本信息。")]),t._v(" "),s("p",[t._v("2、Subversion 中的 “分支” 很重，创建分支、删除分支、合并分支等分支相关操作很慢，而 Git 中的分支很轻，分支操作是 Git 的拳头特性")]),t._v(" "),s("h3",{attrs:{id:"_4-2-创建本地仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-创建本地仓库"}},[t._v("#")]),t._v(" 4.2 创建本地仓库")]),t._v(" "),s("p",[t._v("Git 可以管理任何一个文件夹（及其中内容），只要在该文件夹中执行 "),s("strong",[t._v("git init")]),t._v("，那么就在该文件夹下创建一个名字为 .git的子文件夹，这个子文件夹就是本地仓库，它里面会存放被 Git 所管理的文件的相关信息（例如，历史版本），而该目录就是我们说的工作目录，我们可以把我们的项目放到这个工作目录中")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),s("blockquote",[s("p",[t._v("警告")]),t._v(" "),s("p",[t._v("你不要自己去操作 "),s("strong",[t._v(".git")]),t._v(" 目录，更不要随意将 "),s("strong",[t._v(".git")]),t._v(" 目录删除。这个目录下的内容是 Git 来使用和操作的")])]),t._v(" "),s("p",[t._v("当你执行完 git init 命令之后，当前目录就位于 Git 的监管范畴内，这个目录中的文件的变动（新创建的、被删除的、内容有更新的）都会被 Git 察觉。")]),t._v(" "),s("p",[t._v("在 Gitkraken 中打开这个刚刚初始化的 Git 仓库效果如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228154653515.png",alt:"image-20211228154653515"}})]),t._v(" "),s("h3",{attrs:{id:"_4-3-git基本流程操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-git基本流程操作"}},[t._v("#")]),t._v(" 4.3 git基本流程操作：")]),t._v(" "),s("p",[t._v("1、变动 Repo 目录中的原有内容。所谓的 “变动” 包括：新增文件、修改原有文件内容、删除已有文件等。对于你的 “变动” 行为，在 GitKraken 中你可以观察到它们：如：在工作目录xxx中创建一个hello.txt文件")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228154912015.png",alt:"image-20211228154912015"}})]),t._v(" "),s("p",[t._v("2、然后执行 "),s("strong",[t._v("git add")]),t._v(" 命令。"),s("strong",[t._v("git add")]),t._v(" 命令会把文件内容加入 Git 系统的『"),s("strong",[t._v("暂存区")]),t._v("』（也叫索引区，Index）")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("  文件1  文件2\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("  目录   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##目录不能为空")]),t._v("\n")])])]),s("p",[t._v("在 GitKraken 的图形化界面操作中，对应操作是点击：Stage File")]),t._v(" "),s("p",[t._v("3、接着就可以执行 "),s("strong",[t._v("git commit")]),t._v(" 命令，将文件的内容存入『"),s("strong",[t._v("本地仓库")]),t._v("』（.git）")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". -m "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##必须添加描述信息，如果是文件夹，文件夹不能为空 ")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228155355278.png",alt:"image-20211228155355278"}})]),t._v(" "),s("h3",{attrs:{id:"_4-4-git-中文件的受管状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-git-中文件的受管状态"}},[t._v("#")]),t._v(" 4.4 Git 中文件的受管状态")]),t._v(" "),s("p",[t._v("Git 会将文件（文件夹）的状态分成以下 3 类：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("tracked")]),t._v("：被追踪")]),t._v(" "),s("p",[t._v("tracked 状态意味着 Git 正在关注着这个文件。你对这个文件的任何改动，都会被 Git 发现。Git 会进一步要求你提交你的改动，或撤销你的改动。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ignored")]),t._v("：被忽略的")]),t._v(" "),s("p",[t._v("ignored 状态意味着 Git 完全不管这个文件，在 Git 看来它就跟不存在一样。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("untracked")]),t._v("：不被追踪的")]),t._v(" "),s("p",[t._v("untracked 状态是所有文件的初始状态")])])]),t._v(" "),s("p",[t._v("这里有 2 点需要强调的是：")]),t._v(" "),s("ol",[s("li",[t._v("所有的文件的初始状态都是 "),s("strong",[t._v("untracked")]),t._v(" 。")]),t._v(" "),s("li",[t._v("在正常情况下，"),s("strong",[t._v("文件不应该长期处于 untracked 状态")]),t._v("，应尽快转变为 "),s("strong",[t._v("tracked")]),t._v(" 或 "),s("strong",[t._v("ignored")]),t._v(" 。")])]),t._v(" "),s("p",[t._v("在 GitKraken 中如果你 “动” 过 Repo 目录中的文件的话，你所看到的图形化信息类似如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228155855572.png",alt:"image-20211228155855572"}})]),t._v(" "),s("p",[t._v("对于新创建的文件，它们都是处于 "),s("strong",[t._v("untracked")]),t._v(" 状态的，接下来它们应该尽快通过下述 2 种方法之一切换成 "),s("strong",[t._v("ignored")]),t._v(" 状态，或 "),s("strong",[t._v("tracked")]),t._v(" 状态。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("untracked \n└──> ignored \n\n必须先在 Repo 文件夹中创建一个名为 .gitignore 的文件（必须是这个名字），\n然后把要忽略的文件逐一列在这个文件中，一个文件一行，支持通配符。\nuntracked \n└──> tracked \n\n可以使用 git add + git commit 命令，将它提交给 Git 监管即可。\n")])])]),s("h3",{attrs:{id:"_4-5-新增一个文件的历史版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-新增一个文件的历史版本"}},[t._v("#")]),t._v(" 4.5 新增一个文件的历史版本")]),t._v(" "),s("p",[s("strong",[t._v("git add")]),t._v(" + "),s("strong",[t._v("git commit")]),t._v(" 的作用简单来说，就是将一个文件的当前内容提交给 Git ：")]),t._v(" "),s("ul",[s("li",[t._v("对于 untracked 状态的文件（即新增的文件），提交后会变成 tracked 状态；")]),t._v(" "),s("li",[t._v("对于 tracked 状态的文件（即原有的文件），其历史版本记录则会演进一步。")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello.txt"')]),t._v("     不管是添加这个文件，还是修改这个hello.txt文件,都要先添加到 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" 添加到暂存区\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v(" 提交到git本地仓库\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit 文件名 -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v(" 对于一个修改的文件提交到git本地仓库\n")])])]),s("p",[t._v("对于一次『提交』而言，"),s("strong",[t._v("提交消息（message）是必须的")]),t._v(" 。否则，Git 会拒绝你的这次提交。对应的图形界面操作如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228161847808.png",alt:"image-20211228161847808"}})]),t._v(" "),s("p",[s("code",[t._v("git commit")]),t._v("『"),s("strong",[t._v("只会")]),t._v("』将暂存区的文件的内容提交至本地仓库进行保存。")]),t._v(" "),s("h3",{attrs:{id:"_4-6-git-的核心思想-一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-git-的核心思想-一致性"}},[t._v("#")]),t._v(" 4.6 Git 的核心思想：一致性")]),t._v(" "),s("p",[t._v("当你改动了工作区（硬盘上）的文件的内容之后，你可以使用 "),s("strong",[t._v("git status")]),t._v(" 命令查看文件的状态。 在当前工作区打开git Bash here")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])])]),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228162218780.png",alt:"image-20211228162218780"}})]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("这里除了能看到 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),t._v(" 监控到的文件的变动 `modified"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("txt` 之外，在这条信息的上面，你还能看到 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),t._v(" 为你给出的 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 条建议：接下来请使用 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("git add "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("*"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 命令，或使用 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("*"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 命令。\n\n这两条建议的背后，体现出 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),t._v(" 的一个核心『关注点』："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),t._v(" 希望你能保持"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("工作区和本地仓库的一致性"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n\n在初始状况下，工作区和本地仓库的内容是一致的，当你改动工作区的文件后，工作区和本地仓库的内容就不再一致了"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("对于此情况，"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),t._v(" 希望你将它们重新『调整』成一致，至于如何『调整』，有 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 种方案（这也就是 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Git")]),t._v(" 对你给出的 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 条二选一的建议）：\n")])])]),s("p",[t._v("1、使用 "),s("code",[t._v("git add <file>...")]),t._v(" 命令（及后续的 "),s("code",[t._v("git commit")]),t._v(" 命令），将你对工作区的改动提交到本地仓库。这样，工作区和本地仓库将会重新一致。这也就意味着，本地仓库的版本将向前演进。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello.txt"')]),t._v("\n")])])]),s("p",[t._v("2、使用 "),s("code",[t._v("git checkout -- <file>...")]),t._v(" 命令用本地仓库（的最新、最近版本）的内容覆盖你的工作区的内容。这样，工作区和本地仓库将会重新一致。这也就意味着，你的工作区的内容的变动将会被覆盖、舍弃")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello.txt"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##要注意中间的 -- 否则就是切换分支了")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-7-gitignore文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-gitignore文件"}},[t._v("#")]),t._v(" 4.7 .gitignore文件")]),t._v(" "),s("p",[t._v("之前已经提到过，"),s("strong",[t._v(".gitignore")]),t._v(" 是用于屏蔽某些文件被纳入到 Git 管理范围下的配置文件。")]),t._v(" "),s("p",[t._v("简单来说，"),s("strong",[t._v(".gitignore")]),t._v(" 文件就是一个『"),s("strong",[t._v("黑名单")]),t._v("』，在其中列举的文件都不会被 Git 管理，Git 不会关注这些文件的创建、删除、改动，也不会将它们存入到本地版本库，更不会将它们上传到远程仓库")]),t._v(" "),s("h4",{attrs:{id:"_1-创建-gitignore文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建-gitignore文件"}},[t._v("#")]),t._v(" 1.创建 .gitignore文件")]),t._v(" "),s("blockquote",[s("p",[t._v("注意")]),t._v(" "),s("p",[t._v(".gitignore 文件必须叫 .gitignore ，一定不能错，扩展名不是.txt，这个文件名就是 .gitignore")])]),t._v(" "),s("h4",{attrs:{id:"_2-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-语法"}},[t._v("#")]),t._v(" 2. 语法")]),t._v(" "),s("p",[s("strong",[t._v(".gitignore")]),t._v(" 文件的基本语法：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##：表示注释")]),t._v("\n/：目录层级\n*：通配符\n")])])]),s("p",[t._v("例如：")]),t._v(" "),s("p",[t._v("1、忽略所有后缀名为 log 的文件，无所谓文件名。无论它位于什么层次结构。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("*.log\n")])])]),s("p",[t._v("2、忽略『根目录』下的 target 文件夹")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("/target/\n")])])]),s("p",[t._v("这里最后的 / 非必须。不过个人建议还是加上，因为可以暗示出它是一个文件夹。")]),t._v(" "),s("p",[t._v("3、忽略所有名为 target 的文件夹。无论它位于什么层次结构中。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("target/\n")])])]),s("blockquote",[s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("1、.gitignore"),s("code",[t._v("配置文件的根目录就是当前 Git 工程目录。")]),t._v(".gitignore 配置只对当前 Git 工程有效。")]),t._v(" "),s("p",[t._v("2、在配置语句的前后面添加空格、Tab、注释等，会导致当前行的配置语句失效。所以，不要添加非必要的空白符。")]),t._v(" "),s("p",[t._v("3、配置语句对已经 add、commit 的文件无效")])]),t._v(" "),s("h3",{attrs:{id:"_4-8-取出历史版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-取出历史版本"}},[t._v("#")]),t._v(" 4.8 取出历史版本")]),t._v(" "),s("p",[t._v("从本地版本库中取出文件只需要一个指令")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" 版本标识 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 标签 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n如：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout 5bff6bad18891ade78144c364f738500c149d0d8   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##代表版本标识，每次提交之后都会有一个commit:版本标识")]),t._v("\n")])])]),s("p",[t._v("需要特别提醒的是，磁盘文件夹中的文件会被取出的文件『"),s("strong",[t._v("覆盖")]),t._v("』（覆盖、覆盖），因此你对该文件作出的修改会丢失")]),t._v(" "),s("p",[t._v("例如，本地版本库中的文件有是 20 行的版本是v2，你把本地的文件被你改成 60行（未提交），执行 git checkout 到v2之后，你的本地文件会变成 20行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228170141181.png",alt:"image-20211228170141181"}})]),t._v(" "),s("p",[t._v("取回历史版本之后，如何再回到master呢？双击master即可")]),t._v(" "),s("h3",{attrs:{id:"_4-9-从-git-中删除文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-从-git-中删除文件"}},[t._v("#")]),t._v(" 4.9 从 git 中删除文件")]),t._v(" "),s("p",[s("strong",[t._v("git rm")]),t._v(" 用于删除文件，删除行为分为『弱删除』和『强删除』。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("git rm --cache")]),t._v(" 是『弱』删除。")]),t._v(" "),s("p",[t._v("它表示让 Git『"),s("strong",[t._v("不再监管")]),t._v("』某文件/文件夹，而该文件/文件夹在磁盘上『"),s("strong",[t._v("仍存在")]),t._v("』。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello.txt"')]),t._v(" --cache\n")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("git rm")]),t._v(" 是强删除")]),t._v(" "),s("p",[t._v("它表示告知 Git『"),s("strong",[t._v("不再监管")]),t._v("』某文件/文件夹的同时，还从硬盘上『"),s("strong",[t._v("删除")]),t._v("』此文件/文件夹")])])]),t._v(" "),s("h3",{attrs:{id:"_4-10-撤销"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-撤销"}},[t._v("#")]),t._v(" 4.10 撤销")]),t._v(" "),s("p",[t._v("Git 中的撤销功能很强大，能应对多种常见、不常见场景，因此代价就是对初学者而言学习门槛很高，并且有很多特殊用法用不上，因此，通常各个图形化工具会做出简化，仅仅暴露常见、常用的撤销功能。")]),t._v(" "),s("p",[t._v("在 GitKraken 中执行撤销常见 2 处：")]),t._v(" "),s("p",[t._v("1、在工作区上方有一个 “垃圾桶” 的图标。")]),t._v(" "),s("p",[t._v("2、在工作区和暂存区的文件身上点击鼠标右键，有一个 “Discard changes” 选项。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228172511807.png",alt:"image-20211228172511807"}})]),t._v(" "),s("h4",{attrs:{id:"_1-撤销所有未提交变动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-撤销所有未提交变动"}},[t._v("#")]),t._v(" 1. 撤销所有未提交变动")]),t._v(" "),s("p",[t._v("当你点击 “垃圾桶” 的图标时，你的工作区和暂存区的内容（即，所有未提交的内容），会全部撤销。这意味着，你的工作区的内容将会回到当初你什么都没动过的时候的样子，即，上一轮提交之后的样子")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228172654141.png",alt:"image-20211228172654141"}})]),t._v(" "),s("p",[t._v("当然，GitKraken 会想你确认一下，怕你是手抖点错了。这个图形化界面操作的背后，执行的是 "),s("strong",[t._v("git reset --hard")]),t._v(" 命令。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("hard")]),t._v(" 方式的 "),s("strong",[t._v("git reset")]),t._v(" 会同时撤销你工作区和暂存区中的内容（discard all changes）。撤销后，你的项目就一步到位地回到『当初什么都没动过的样子』")])]),t._v(" "),s("h4",{attrs:{id:"_2-单独撤销某文件的未提交变动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-单独撤销某文件的未提交变动"}},[t._v("#")]),t._v(" 2.单独撤销某文件的未提交变动")]),t._v(" "),s("p",[t._v("这个功能执行很简单，如果你想撤销你对某个文件的变动（注意是修改了文件的内容），对于增加的文件，右键是没有这个选项的。那么在它身上鼠标右键，点击 “Discard changes” 。点完之后，这个文件就恢复成没动过之前的样子。")]),t._v(" "),s("p",[t._v("这个操作背后执行的命令是： "),s("strong",[t._v("git checkout -- <文件名>")]),t._v(" 。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意")]),t._v(" "),s("p",[t._v("不是 git reset 什么的。这个命令从版本库中的最新、最近版本来覆盖工作目录中的内容，即恢复成你变动之前的样子")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228173901492.png",alt:"image-20211228173901492"}})]),t._v(" "),s("h4",{attrs:{id:"_3-撤销刚才的提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-撤销刚才的提交"}},[t._v("#")]),t._v(" 3.撤销刚才的提交")]),t._v(" "),s("p",[t._v("不排除这种情况，你已经提交、或手抖提交了，然后发现，本不该提交的 ......")]),t._v(" "),s("p",[t._v("执行 "),s("strong",[t._v("git reset --soft HEAD~1")]),t._v(" 命令就可以用来实现撤销已提交的变更。HEAD也可以小写")]),t._v(" "),s("blockquote",[s("p",[t._v("TIP")]),t._v(" "),s("p",[s("strong",[t._v("git reset --soft HEAD~1")]),t._v(" 命令的本意是：移动 HEAD 到指定的上一次的提交上。而 HEAD 指针是你的分支的逻辑上的（当前的）终点。")]),t._v(" "),s("p",[t._v("这里有 2 点注意的：")]),t._v(" "),s("p",[t._v("1、HEAD~1 的含义就是最新版本的上一个版本，毫无疑问，还可以有 HEAD~2 、HEAD~3 等等，表示最新版本的上上个版本、上上上个版本。")]),t._v(" "),s("p",[t._v("2、你所提交的东西（也就是你想撤销的代码），会被 Git 放到暂存区，给你多一次考虑的机会，是真得删除掉，还是改改再提交。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228174759844.png",alt:"image-20211228174759844"}})]),t._v(" "),s("p",[t._v("此时撤销到暂存区，当然如果你不需要修改的内容，可以执行删除")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228175050963.png",alt:"image-20211228175050963"}})]),t._v(" "),s("h4",{attrs:{id:"_4-比较文件差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-比较文件差异"}},[t._v("#")]),t._v(" 4. 比较文件差异")]),t._v(" "),s("p",[t._v("对比『"),s("strong",[t._v("工作空间中的文件")]),t._v("』与当前 Git 本地仓库中的最新、最近的版本版（也就是 "),s("strong",[t._v("HEAD")]),t._v(" 版本）之间的差异")]),t._v(" "),s("p",[t._v("主要是工作区和暂存区文件内容的比较，使用命令 git diff <文件名>")]),t._v(" "),s("p",[t._v("例如：修改一个文件world.txt，将内容提交到暂存区")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" world.txt\n")])])]),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228180258689.png",alt:"image-20211228180258689"}})]),t._v(" "),s("p",[t._v("说明： ---表示变动前的版本，+++表示改了之后的版本")]),t._v(" "),s("blockquote",[s("p",[t._v("这种方式查看很不方便，推荐使用其他的第三方工具，如小乌龟等")])]),t._v(" "),s("h2",{attrs:{id:"_5-git进阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-git进阶"}},[t._v("#")]),t._v(" 5.git进阶")]),t._v(" "),s("h3",{attrs:{id:"_5-1-分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-分支"}},[t._v("#")]),t._v(" 5.1 分支")]),t._v(" "),s("p",[t._v("版本的提交不可能『依次进行，以便形成一条直线型的提交历史记录』，原因有二")]),t._v(" "),s("p",[t._v("1、"),s("strong",[t._v("并行式开发")]),t._v("：有两个以上的开发者在对同一个项目进行并行式开发。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("版本库 1            版本库2\nA &lt;--- B &lt;--- C     A &lt;--- B &lt;--- D\n\n         C\n        /\nA &lt;--- B  \n        \\\n         D\n")])])]),s("p",[t._v("2、"),s("strong",[t._v("修复旧版本中的 bug")]),t._v("：一方面要修复旧版本中的 bug，而与此同时又要创建和发布新的版本。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("前期\nA &lt;--- B &lt;--- C &lt;--- D\n\n修复 bug 之后\n         C &lt;--- D\n        /\nA &lt;--- B  \n        \\\n         E\n")])])]),s("p",[t._v("有人将分支比喻成泳道")]),t._v(" "),s("p",[t._v("分支可以看作是开发过程当中的并行线，我们可以把提交图想象成游泳池中的泳道：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("       E              release\n        /\nA &lt;--- B &lt;--- C &lt;--- D  master\n               \\\n                F       test\n")])])]),s("p",[t._v("在一个 Git 版本库中，总是唯一存在着一个『"),s("strong",[t._v("活动分支")]),t._v("』（也叫『"),s("strong",[t._v("当前分支")]),t._v("』）。我们可以用 "),s("strong",[t._v("branch")]),t._v(" 命令（不带选项）来列出所有的分支。Git 会用星号（*）凸显出当前活动分支。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("  branch\n")])])]),s("p",[t._v("在 GitKraken 中当前分支名字前面有一个 ✓符号。")]),t._v(" "),s("h3",{attrs:{id:"_5-2-分支的基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-分支的基本操作"}},[t._v("#")]),t._v(" 5.2 分支的基本操作")]),t._v(" "),s("p",[t._v("1、查看分支")]),t._v(" "),s("p",[t._v("通过 "),s("strong",[t._v("git branch")]),t._v(" 可以看到 Git 仓库的所有分支。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n")])])]),s("p",[t._v("当执行 git init 指令的时候，Git 就会自动产生一个名为 "),s("strong",[t._v("master")]),t._v(" 的分支：主分支。主分支是默认的、初始的。")]),t._v(" "),s("p",[t._v("2、创建分支")]),t._v(" "),s("p",[t._v("创建新的分支，也是使用 "),s("strong",[t._v("git branch")]),t._v(" 命令。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch 新分支名 \n")])])]),s("p",[t._v("3、切换分支")]),t._v(" "),s("p",[t._v("建立分支后，可以通过 "),s("strong",[t._v("git checkout")]),t._v(" 命令来切换当前分支：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("4、删除分支")]),t._v(" "),s("p",[t._v("删除分支使用：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("被删除分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("如果在删除一个分支时，自己还未转移到其他分支上，git 会拒绝删除操作。如果坚持要删除的话，则使用 "),s("strong",[t._v("-D")]),t._v(" 选项替换 "),s("strong",[t._v("-d")]),t._v(" 选项。")]),t._v(" "),s("p",[t._v("一般情况下，分支应该合并到另一个分支。如果要删除还未合并的分支，Git 会显示错误信息，并拒绝删除。当然你也通过 "),s("strong",[t._v("-D")]),t._v(" 选项来强制删除")]),t._v(" "),s("h3",{attrs:{id:"_5-3-分支合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-分支合并"}},[t._v("#")]),t._v(" 5.3. 分支合并")]),t._v(" "),s("p",[t._v("在大多数情况下，项目的分支都会被合并到主（master）分支。合并项目分支需要使用 "),s("strong",[t._v("git merge")]),t._v(" 命令：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("另一个分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("该命令会把『另一个分支』合并到当前分支，合并后的 Commit 属于当前分支。")]),t._v(" "),s("blockquote",[s("p",[t._v("你站在哪个分支上？当前分支是谁？")]),t._v(" "),s("p",[t._v("考虑这个问题的关键点在于：合并分支是合并 “进来” 。体会下，什么叫合 “进” 来。")]),t._v(" "),s("p",[t._v("假设是 A 和 B 两个分支合并，这里就有 2 种情况：")]),t._v(" "),s("ul",[s("li",[t._v("站在 A 分支上（你的当前分支是 A ），把 B 分支合并 “进来” 。")]),t._v(" "),s("li",[t._v("站在 B 分支上（你的当前分支是 B ），把 A 分支合并 “进来”。")])]),t._v(" "),s("p",[t._v("这 2 种情况都合情合理合法，关键是你要考虑清楚你需要的是哪一种情况。")])]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("前期：\nA &lt;--- B &lt;--- E    master\n        \\\n         C &lt;--- D  feature\n\n后期：\nA &lt;--- B &lt;--- E &lt;--- F  master\n        \\           /\n         C &lt;------ D  feature\n")])])]),s("p",[t._v("结合上面的那个问题，从图上（合并的箭头方向）可以看到，你是站在 master 分支上，把 feature 分支合并了 “进来” 。")]),t._v(" "),s("blockquote",[s("p",[t._v("回顾一下")]),t._v(" "),s("p",[t._v("如果合并后想反悔，那么可以执行之前所学的 git reset --soft HEAD~1，回到提交前，然后放弃提交。")])]),t._v(" "),s("p",[t._v("合并所产生的节点和普通节点有一个很重要的区别：")]),t._v(" "),s("ul",[s("li",[t._v("普通节点只有唯一的父节点，表示为 "),s("code",[t._v("HEAD^1")]),t._v(" ；")]),t._v(" "),s("li",[t._v("合并节点有 2 个父节点，分别表示为 "),s("code",[t._v("HEAD^1")]),t._v(" 和 "),s("code",[t._v("HEAD^2")])])]),t._v(" "),s("h3",{attrs:{id:"_5-4-合并的冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-合并的冲突"}},[t._v("#")]),t._v(" 5.4 合并的冲突")]),t._v(" "),s("p",[t._v("Git 的设计目标之一就是为了能够让开发者之间的分布式协作变得尽可能容易一些。因此从很大程度上来说，merge 命令能自动对分支进行合并，完全不需要用户交互。")]),t._v(" "),s("p",[t._v("当两个分支对于同一个文件做出了不同的操作时，可能会出现冲突，而且此时，Git 无法自动 “帮” 你合并。最常见的冲突情况有 2 种：")]),t._v(" "),s("p",[t._v("1、两个分支对于"),s("strong",[t._v("同一个文件")]),t._v("做出了修改")]),t._v(" "),s("p",[t._v("那么你在合并这两个分支时，Git 无法自己决定 “合并后保留的是哪个分支上的内容（而废弃另一个），亦或者是两个分支上的都要保留” ？这种情况，就需要人来裁决")]),t._v(" "),s("p",[t._v("2、一个分支对一个文件执行了删除操作，而另一个分支上这个文件还在，仅仅只是内容有变动。")]),t._v(" "),s("p",[t._v("那么你在合并这两个分支时，Git 无法自己决定 “合并后这个文件到底是应该删除，还是留着” ？这种情况也需要人来裁决。")]),t._v(" "),s("blockquote",[s("p",[t._v("补充一点，并非对于同一个文件的修改，都会造成冲突。比如，如果两个分支是对同一个文件的不同位置做出了修改（注意和上述第一种情况的区别），Git 自己也会自动合并：合并后的内容会同时采纳两个分支上的操作。")])]),t._v(" "),s("p",[t._v("冲突合并就失败，显示信息如下：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev\n\nAuto-merging foo.txt\nCONFLICT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": Merge conflict "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" foo.txt\nAutomatic merge failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" fix conflicts and "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" commit the result.\n")])])]),s("p",[t._v("此时，如果执行 "),s("strong",[t._v("git status")]),t._v(" 命令，会看到 git 提醒你，它无法完成自动合并，需要你手动进行编辑，并且要求你在编辑之后")]),t._v(" "),s("p",[t._v("执行"),s("strong",[t._v("git  add 文件名")]),t._v("保存到暂存区 ，然后执行 **git commit  -m “xxx” ** 来提交到本地仓库")]),t._v(" "),s("h3",{attrs:{id:"_5-5-快速合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-快速合并"}},[t._v("#")]),t._v(" 5.5 快速合并")]),t._v(" "),s("p",[t._v("所谓的快速合并指的是在执行 git merge 命令时多带一个 "),s("strong",[s("code",[t._v("--ff")])]),t._v(" 的参数，它是 Fast Forward 这两个单词的首字母。有 “快速” 合并自然就有 “非快速” 合并："),s("code",[t._v("--no-ff")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge 分支名 --ff\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge 分支名 --no-ff\n")])])]),s("blockquote",[s("p",[t._v("警告")]),t._v(" "),s("p",[t._v("不是每次都可以进行快速合并的，如果当前的分支和另一个分支没有内容上的差异，就是说当前分支的每一个提交(commit)都已经存在另一个分支里了，此时就可以快速合并，当然也可以执行非快速合并")])]),t._v(" "),s("p",[t._v("例1：master分支上有了5次提交，然后基于master创建分支test，并在test上进行3次提交，此时切换到master分支上就可以“快速合并”test分支，因为test分支上含有master分支的所有内容。")]),t._v(" "),s("p",[t._v("例2：master分支上有了5次提交，然后基于master创建分支test。如果是test分支做了三次提交，然后切换到master分支上对工作区的内容做了修改操作，然后提交。也就是说这个时候test和master分支的内容有差异，此时切换到master分支上去合并test分支就不能进行快速合并。")]),t._v(" "),s("blockquote",[s("p",[t._v("Git 在合并时的默认行为，先看当前的情况是否符合快速合并的条件，如果符合就进行快速合并，否则就进行非快速合并，当然，你可以通过强行指定 --no-ff 告诉 Git ，在合并时一定是按 “非快速合并” 进行合并。")])]),t._v(" "),s("p",[t._v("实验1：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228201350723.png",alt:"image-20211228201350723"}})]),t._v(" "),s("p",[t._v("在上图中，feature 分支上的内容比 master 分支的内容只多不少，即 feature 分支完全 “涵盖” 了 master 分支的内容。这种情况下，执行 git merge --ff 过程效果如下，注意是master分支去合并feature分支")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211228202127245.png",alt:"image-20211228202127245"}})]),t._v(" "),s("p",[t._v("合并之后效果，分支的提交历史也没有“开叉”，即没有多个父提交节点")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229103709729.png",alt:"image-20211229103709729"}})]),t._v(" "),s("p",[t._v("实验2：")]),t._v(" "),s("p",[t._v("在上一个实验的基础上，master分支和feature分支内容没有差异，版本都是c3。在feature上进行3次提交，然后切换到master分支上以"),s("strong",[t._v("非快速合并")]),t._v("的方式去合并feature。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229104122394.png",alt:"image-20211229104122394"}}),t._v(" "),s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229104145756.png",alt:"image-20211229104145756"}})]),t._v(" "),s("p",[t._v("这时候，同快进式合并不同的是，在c3处产生了“开叉”，然后新生成了一个commit “Merge branch 'feature'”节点，")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("git merge 默认行为，在你使用 git merge 命令没有指定合并方式时，Git 总是先判断当前是否能进行快速合并，如果不行，它再执行非快速合并。快速合并只适用于部分合并情况，而非快速合并适用于所有的合并情况，快速合并会让历史记录中 “省” 一个合并节点。")])]),t._v(" "),s("h3",{attrs:{id:"_5-6-变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-变基"}},[t._v("#")]),t._v(" 5.6 变基")]),t._v(" "),s("p",[t._v("git rebase 能实现和 git merge 同样的功能，它可以以另一种方式来实现 “分支合并” 的效果。")]),t._v(" "),s("h4",{attrs:{id:"_5-6-1-merge-和-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-1-merge-和-rebase"}},[t._v("#")]),t._v(" 5.6.1.merge 和 rebase")]),t._v(" "),s("p",[t._v("假设我们有两个分支（master 和 feature）。feature 是基于 master 的 C1 节点建立的分支，然后开发人员分别在两个分支各自开发")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229111903965.png",alt:"image-20211229111903965"}})]),t._v(" "),s("p",[t._v("一个人在 C1 版本基础上开发出了 C2 版本；另一个人在 C1 基础上开发出了 C3 版本")]),t._v(" "),s("p",[t._v("现在我们想要把 feature 分支开发的内容合并到 master，使用 merge 命令")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge feature             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##按esc到命令模式，:wq!")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("复习")]),t._v(" "),s("p",[t._v("merge 命令的使用是 “站在 master 分支” 的角度上来看，将 feature 分支的内容 “纳入” 到 master 分支。master 分支会演进出一个新的版本")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229112212527.png",alt:"image-20211229112212527"}})]),t._v(" "),s("p",[t._v("从整体来看，merge 命令执行之后，会在之前的相关的 3 个版本节点之外生成一个新的节点 这个新节点将会是 master 线路上的最新的 “终点”")]),t._v(" "),s("p",[t._v("对于同样的初始情况，如果我们使用 rebase 命令会有什么不同。git rebase 的正确使用方式和 git merge 有一点是完全相反的：")]),t._v(" "),s("ul",[s("li",[t._v("使用 git merge 时，你是站在 A 分支，考虑把 B 分支 “合并进来”；")]),t._v(" "),s("li",[t._v("使用 git rebase 时，你是站在 B 分支，考虑把 B 分支的 “基” 变成 A 的某个节点（通常是端点，即，最新的节点）。")])]),t._v(" "),s("p",[t._v("你要执行的命令如下（再次强调，你是站在 feature 分支上）：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n")])])]),s("p",[t._v("在 GitKraken 中等价的操作如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229112918484.png",alt:"image-20211229112918484"}})]),t._v(" "),s("blockquote",[s("p",[t._v("实际开发中，master分支有提交的内容，feature分支上有提交的内容，此时应该是要切换到master分支，合并feature的内容，然后在切换到feature分支，执行变基到master")]),t._v(" "),s("p",[t._v("整个流程的总而言之一句话：master merge feature   ，feature rebase on master")])]),t._v(" "),s("h3",{attrs:{id:"_5-7-git-stash使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-git-stash使用"}},[t._v("#")]),t._v(" 5.7 Git Stash使用")]),t._v(" "),s("h4",{attrs:{id:"_5-7-1-git-stash-存放-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-1-git-stash-存放-的作用"}},[t._v("#")]),t._v(" 5.7.1 Git Stash(存放) 的作用")]),t._v(" "),s("p",[t._v("在开发过程中，我们经常会遇到如下两种情况：")]),t._v(" "),s("ul",[s("li",[t._v("开发到一半，需要同步远端代码")]),t._v(" "),s("li",[t._v("手头的工作被打断，需要先做别的需求")])]),t._v(" "),s("p",[t._v("上述两种情况所面对的问题，都不单单是 pull、commit、push 就能解决，或者说，使用 pull、commit、push 并非最有解。这里我们可以通过引入 "),s("strong",[t._v("git stash")]),t._v(" 来解决这些问题。")]),t._v(" "),s("p",[s("strong",[t._v("git stash")]),t._v(" 用于想要保存当前的修改，但是想回到之前最后一次提交的干净的工作仓库时进行的操作。"),s("em",[t._v("git stash")]),t._v(" 将本地的修改保存起来，并且将当前代码切换到 HEAD 提交上")]),t._v(" "),s("blockquote",[s("p",[t._v("简单来说")]),t._v(" "),s("p",[t._v("使用 git stash 还你一个干净的工作目录！")])]),t._v(" "),s("p",[t._v("通过 git stash 存储的修改列表，可以通过 "),s("strong",[t._v("git stash list")]),t._v(" 查看。"),s("strong",[t._v("git stash show")]),t._v(" 用于校验，"),s("strong",[t._v("git stash apply")]),t._v(" 用于重新存储。直接执行 git stash 等同于 "),s("strong",[t._v("git stash save")])]),t._v(" "),s("blockquote",[s("p",[t._v("TIP")]),t._v(" "),s("p",[t._v("当然，如果是通过 Git 的图形化客户端进行操作，那么对于这些命令就无需花费太多时间和精力进行记忆。采用图形工具，点击Stash按钮，这会出现正方形的虚线框")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229114548519.png",alt:"image-20211229114548519"}})]),t._v(" "),s("p",[t._v("最新的存储保存在 refs/stash 中。老的存储可以通过相关的参数获得，例如 "),s("code",[t._v("lstash@{0}")]),t._v(" 获取最新的存储，"),s("code",[t._v("stash@{1}")]),t._v(" 获取次新，存储可以直接通过索引的位置来获得 "),s("code",[t._v("stash@{n}")])]),t._v(" "),s("p",[t._v("图形化操作：点击某个正方形虚线框，点击Pop按钮，可以获得，然后再add，再commit")]),t._v(" "),s("h4",{attrs:{id:"_5-7-2-开发到一半-同步远端代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-2-开发到一半-同步远端代码"}},[t._v("#")]),t._v(" 5.7.2 开发到一半，同步远端代码")]),t._v(" "),s("p",[t._v("当你的开发进行到一半，但是代码还不想进行提交，然后需要同步去关联远端代码时。")]),t._v(" "),s("ul",[s("li",[t._v("如果你本地的代码和远端代码没有冲突时，可以直接通过 git pull 解决。")]),t._v(" "),s("li",[t._v("但是如果可能发生冲突怎么办？直接 "),s("code",[t._v("git pull")]),t._v(" 会拒绝覆盖当前的修改。")])]),t._v(" "),s("p",[t._v("遇到这种情况，需要先 stash 本地的代码，进行 pull，然后再 pop 出本地代码")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n")])])]),s("h2",{attrs:{id:"_6-git高级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-git高级"}},[t._v("#")]),t._v(" 6.git高级")]),t._v(" "),s("h3",{attrs:{id:"_6-1-git远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-git远程仓库"}},[t._v("#")]),t._v(" 6.1 git远程仓库")]),t._v(" "),s("p",[t._v("远程（remote）版本库也叫上游（origin）版本库")]),t._v(" "),s("p",[t._v("通常我们并不常亲自建立远程仓库，而是委托给『第三方』。常见的操作是，先在第三方上创建『远程 Git 文档库』，然后复制（Clone）出一个『本地 Git 文档库』")]),t._v(" "),s("h3",{attrs:{id:"_6-2-在托管网站上创建远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-在托管网站上创建远程仓库"}},[t._v("#")]),t._v(" 6.2 在托管网站上创建远程仓库")]),t._v(" "),s("p",[t._v("常见的代码托管仓库有：")]),t._v(" "),s("ul",[s("li",[t._v("国外：github、gitlib")]),t._v(" "),s("li",[t._v("国内：gitee、Coding")])]),t._v(" "),s("p",[t._v("在托管网站上创建项目后，通常项目目录下是空的，可以通过以下 2 种途径初始化该项目：")]),t._v(" "),s("h3",{attrs:{id:"_6-3-克隆远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-克隆远程仓库"}},[t._v("#")]),t._v(" 6.3 克隆远程仓库")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程文档库的路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地文档库的文件夹名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("更具体的的格式为：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git clone &lt;http://Web服务器地址/远程文档库路径> &lt;本地文档库名称>\n")])])]),s("p",[t._v("例如:在git bash窗口执行如下")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /d\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" repo2\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" repo2\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://gitee.com/xiaokongming/hospital-repo.git   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#克隆到当前目录  网址是HTTPS方式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@gitee.com:xiaokongming/hospital-repo.git      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#SSH方式")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("对于SSH这种方式要在本地电脑生成秘钥对，把公钥拷贝到中央仓库，和账户绑定在一起。如果是多人团队开发，则需要点击某个仓库，然后点击”管理“，点击”部署公钥管理“，将小组成员的公钥添加进去")]),t._v(" "),s("p",[t._v("同样对应HTTPS方式，如果是多人团队开发，则需要点击某个仓库，然后点击”管理“，点击“仓库成员管理”，然后点击“开发者管理”，“添加仓库成员”，添加小组成员的gitee账号即可，在日常工作中，"),s("strong",[t._v("git clone")]),t._v(" 命令一个项目通常只会执行一次")])]),t._v(" "),s("h3",{attrs:{id:"_6-4-推送远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-推送远程仓库"}},[t._v("#")]),t._v(" 6.4 推送远程仓库")]),t._v(" "),s("p",[t._v("当我们完成对本地文档库的修改，可以将这些修改『"),s("strong",[t._v("推送")]),t._v("』到远程 Git 仓库：")]),t._v(" "),s("p",[t._v("如果是第一次推送一个工程到远程仓库")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin 远程仓库地址\n如：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" orign https://gitee.com/xiaokongming/three.git\n")])])]),s("p",[t._v("然后：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n如：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),s("p",[s("strong",[t._v("git push")]),t._v(" 有两种模式：")]),t._v(" "),s("ul",[s("li",[t._v("推送本地『"),s("strong",[t._v("所有")]),t._v("』分支，")]),t._v(" "),s("li",[t._v("推送『"),s("strong",[t._v("当前")]),t._v("』分支。")]),t._v(" "),s("li",[t._v("如多使用第一种模式，配置：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default matching    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#第一种配置  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default simple      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#第二种配置  Git2.0  默认")]),t._v("\n")])])]),s("p",[t._v("第二种模式更安全，推荐使用第二种。")]),t._v(" "),s("p",[t._v("无论哪种传送模式，只要执行 "),s("strong",[t._v("git push --all")]),t._v(" 都是推送所有分支")]),t._v(" "),s("p",[t._v("实验操作：")]),t._v(" "),s("p",[t._v("如：在本地添加一个文件，")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add.txt"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#提交到本地暂存区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("  commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"v6"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master \n")])])]),s("h3",{attrs:{id:"_6-5-推送冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-推送冲突"}},[t._v("#")]),t._v(" 6.5 推送冲突")]),t._v(" "),s("p",[t._v("如果远程分支并非你一个人独有，那么很有可能由于别人的提交，导致远程分支向前演进，从而导致 push 失败。此时需要『"),s("strong",[t._v("三步合并法")]),t._v("』解决冲突问题。")]),t._v(" "),s("ul",[s("li",[t._v("从远程 Git 文档库取回当前所在分支的最新数据。")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 其它分支\n")])])]),s("ul",[s("li",[s("p",[t._v("把远程 Git 文档库的分支合并到本地 Git 的分支。这一步可能会出现冲突。解决冲突，合并代码。")])]),t._v(" "),s("li",[s("p",[t._v("再推送")])])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 其它分支\n")])])]),s("h3",{attrs:{id:"_6-6-小贴士"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-小贴士"}},[t._v("#")]),t._v(" 6.6 小贴士")]),t._v(" "),s("p",[t._v("1、xxx 只和 xxx 玩，yyy 只和 yyy 玩：")]),t._v(" "),s("p",[t._v("当你要推送（push，逻辑上就是上传）本地的 xxx 分支时，你上传的目的地一定是远程的 xxx 分支；")]),t._v(" "),s("p",[t._v("当你要拉取（push，逻辑上就是下载）远程的 yyy 分支时，你下载的目的地一定是本地的 yyy 分支；")]),t._v(" "),s("p",[t._v("理论上虽然可以，但是实际上我们并不会让本地的 xxx 分支和远程的 yyy 分支有推拉关系。即，本地 xxx 分支只和远程 xxx 分支『玩』，本地 yyy 分支只和远程的 yyy 分支『玩』。")]),t._v(" "),s("p",[t._v("2、推拉（push/pull）都是在更新：")]),t._v(" "),s("p",[t._v("推送（push）操作的执行的潜在前提是：你的本地 xxx 分支上的代码一定更『新』（版本更高），否则，你为什么要上传呢？")]),t._v(" "),s("p",[t._v("拉取（pull）操作的执行的潜在前提是：你的远程 xxx 分支上的代码一定更『新』（版本更高），否则，你为什么要下载呢？")]),t._v(" "),s("p",[s("strong",[t._v("推拉都是在更新，只是『方向』不同")]),t._v("：推送，是用本地 xxx 分支更新远程 xxx 分支；拉取，是用远程 xxx 分支更新本地 xxx 分支。")]),t._v(" "),s("p",[t._v("3、合理使用『简称』少费口舌：")]),t._v(" "),s("p",[t._v("通过 git push 命令推送本地 xxx 分支代码到远程 xxx 分支，实现远程 xxx 分支的代码的更新，简称：通过推送 xxx 分支来更新远程 xxx 分支。")]),t._v(" "),s("p",[t._v("通过 git pull 命令拉取远程 yyy 分支代码到本地 yyy 分支，实现本地 yyy 分支的代码的更新，简称：通过拉取 yyy 分支来更新本地 yyy 分支。")]),t._v(" "),s("p",[t._v("4、故意推拉『旧代码』是为了放弃：")]),t._v(" "),s("p",[t._v("可以推送（上传）旧代码，在此之前，你的远程 xxx 分支的代码更新，版本更高，而你推送（上传）的旧代码会覆盖掉远程的新代码；")]),t._v(" "),s("p",[t._v("也可以拉取（下载）旧代码，在此之前，你的本地 yyy 分支的代码更新，版本更高，而你拉取（下载）的旧代码会覆盖掉本地新代码；")]),t._v(" "),s("p",[t._v("通常情况下，你不太可能会用旧代码更新新代码，如果你这么干了，意味着你是想废弃新代码中『新』的那部分内容")]),t._v(" "),s("h2",{attrs:{id:"_7-git-工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-git-工作流"}},[t._v("#")]),t._v(" 7.git 工作流")]),t._v(" "),s("p",[t._v("Git 最大的优点同时也是它的最大的缺点：极具灵活性。这种灵活抬高了初学者的学习门槛。为此，有经验的程序员和大型机构结合软件开发的流程为 git 总结-提炼出了固定的使用方式，这中特定的使用顺序和方法被称为 "),s("strong",[t._v("工作流")]),t._v(" 。")]),t._v(" "),s("p",[t._v("Atlassian 公司推荐一种基于 "),s("strong",[t._v("git rebase")]),t._v(" 命令的 Git 工作流，这种工作流与 github 工作流的却别在于，『处理代码冲突』的工作从项目管理者转交到了代码提交者手里，项目提交者必须要保证自己的新代码与 master 分支合并后必须是无误的（至少是不耽误 master 分支原有代码运行的），再发起 pull request 。")]),t._v(" "),s("h3",{attrs:{id:"_7-1-核心规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-核心规则"}},[t._v("#")]),t._v(" 7.1 核心规则")]),t._v(" "),s("p",[t._v("这种基于 "),s("strong",[t._v("git rebase")]),t._v(" 的工作流核心准则只有 2 条：")]),t._v(" "),s("p",[t._v("1、让你的本地的 master 和远程仓库的 master『在一起』；")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229154205947.png",alt:"image-20211229154205947"}})]),t._v(" "),s("p",[t._v("如何让它俩在一起？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. 切换到 master 分支\n2. 执行 git pull\n")])])]),s("p",[t._v("2、让你的工作分支始终保证是『基于你的本地最新 master』的")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20211229154306087.png",alt:"image-20211229154306087"}})]),t._v(" "),s("p",[t._v("如何让工作分支基于最新的 master ？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. 切换到工作分支\n2. 执行 git rebase\n")])])]),s("p",[t._v("总而言之，上述两个规则总结起来就是一句话：")]),t._v(" "),s("p",[s("strong",[t._v("时刻保证你当前的工作分支是『基于』最新的 master 远程分支")])]),t._v(" "),s("h3",{attrs:{id:"_7-2-工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-工作流程"}},[t._v("#")]),t._v(" 7.2 工作流程")]),t._v(" "),s("p",[t._v("这种工作流的整体流程如下：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[1]. git clone 下载中央仓库的项目。\n\n[2]. 创建属于自己的分支。如何创建见后续。\n\n[3]. 等待项目经理安排任务。接受到项目经理安排的任务：实现某某功能，或修改某某 bug 。\n\nwhile (true) {\n\n    [4]. 是否满足核心准则一：本地 master 是否是最新的？\n    if (不是) {\n        a. 更新（本地）master 分支。 \n    }\n\n    [5]. 是否满足核心准则二：本地 xxx 是否是『基于』最新的 master ？\n    if (不是) {\n        a. 本地 xxx 分支变基。 \n    }\n\n    [6]. 判断是否完成了任务？\n    if (是) {\n        a. 更新（远程）xxx 分支。 \n        b. 发起和并请求（pull request），并口头通知项目经理，希望他合并。\n        c. break，跳出循环\n    } \n    else if (否) {\n        a. 写 5 分钟代码，努力完成项目经理安排的任务。 \n    }\n}\n\n[7]. 回到上面第 [3] 步，再次等待项目经理安排新任务，开始新的工作周期。\n")])])]),s("blockquote",[s("p",[t._v("警告：不正常场景")]),t._v(" "),s("p",[t._v("1、场景一：本地 master 和中央仓库 master 不在一起，要解决很简单，对你的 master 分支执行 git pull 来更新你的本地仓库就行")]),t._v(" "),s("p",[t._v("2、场景二：本地开发分支不是基于最新的 master，出现这种情况和上一个场景有一定关系。本来你的开发分支是基于最新的 master ，但是由于中央仓库的 master 更新以后，你“当初的” 最新 master ，已经不再是 “最新” 了，对于这种情况，要解决也很简单，对你的开发分支执行 git rebase 变基就行了")])]),t._v(" "),s("h2",{attrs:{id:"_8-git私服"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-git私服"}},[t._v("#")]),t._v(" 8.git私服")]),t._v(" "),s("p",[t._v("参考gitea笔记部分")])])}),[],!1,null,null,null);a.default=r.exports}}]);