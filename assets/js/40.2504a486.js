(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{515:function(t,s,a){"use strict";a.r(s);var e=a(65),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"mysql-数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-数据库"}},[t._v("#")]),t._v(" MySql_数据库")]),t._v(" "),a("ul",[a("li",[t._v("DDL(数据定义语言):数据库结构和表结构的增删改查")]),t._v(" "),a("li",[t._v("DML(数据操作语言):表数据的增删改")]),t._v(" "),a("li",[t._v("DQL(数据查询语言):表数据的查询")]),t._v(" "),a("li",[t._v("DCL(数据控制语言):数据库的权限控制")])]),t._v(" "),a("h3",{attrs:{id:"数据库防坑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库防坑"}},[t._v("#")]),t._v(" 数据库防坑")]),t._v(" "),a("blockquote",[a("p",[t._v("数据库版本 分组报错")])]),t._v(" "),a("p",[t._v("报错信息:    Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggre")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除 sql_mode = ONLY_FULL_GROUP_BY 这个设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.sql_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n@"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@sql_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" sql_mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPLACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@sql_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ONLY_FULL_GROUP_BY'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 修改全局")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.sql_mode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.sql_mode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 修改当前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@sql_mode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 方法二: 在mysql配置文件 my.ini 添加下面配置  最后再服务重启mysql即可")]),t._v("\nsql_mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" STRICT_TRANS_TABLES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ERROR_FOR_DIVISION_BY_ZERO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("NO_ENGINE_SUBSTITUTION\n")])])]),a("div",{staticClass:"language-ini extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("mysqld")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 设置server_id，同一局域网中需要唯一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("server_id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("103")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("3306")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("basedir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("C:\\JavaFiles\\mysql-8.0.19-winx64 ## 这里替换成你自己的解压目录即可")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("datadir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("C:\\JavaFiles\\mysql-8.0.19-winx64\\data   ## 存储数据的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("max_connections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("max_connect_errors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("character-set-server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("UTF8MB4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("default-storage-engine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("INNODB")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("default_authentication_plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("mysql_native_password")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("sql_mode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("mysql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("default-character-set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("UTF8MB4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("default-character-set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("utf8")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("3306")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("default-character-set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("utf8")]),t._v("\n")])])]),a("h2",{attrs:{id:"数据库-索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库-索引"}},[t._v("#")]),t._v(" 数据库_索引")]),t._v(" "),a("h3",{attrs:{id:"索引简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引简介"}},[t._v("#")]),t._v(" 索引简介")]),t._v(" "),a("p",[t._v("MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。索引的本质：索引是数据结构。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("注：在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。你可以简单理解为“排好序的快速查找数据结构。\n")])])]),a("h3",{attrs:{id:"存储位置和文件结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储位置和文件结构"}},[t._v("#")]),t._v(" 存储位置和文件结构")]),t._v(" "),a("p",[t._v("一般来说索引本身也很大，"),a("strong",[t._v("不可能存储在内存中，因此索引往往以文件形式存储在硬盘上")])]),t._v(" "),a("p",[t._v("索引文件结构：hash、二叉树、B树、B+树")]),t._v(" "),a("p",[t._v("其中"),a("strong",[t._v("聚簇索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引文件结构")]),t._v("， memory的存储引擎使用的是hash结构")]),t._v(" "),a("h3",{attrs:{id:"索引优势和劣势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引优势和劣势"}},[t._v("#")]),t._v(" 索引优势和劣势")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("优势：\n1）类似大学图书馆建书目索引，提高数据检索效率，降低数据库的IO成本\n2）通过索引列对数据进行排序，降低数据排序成本，降低了CPU的消耗\n\n劣势：\n1）虽然索引大大提高了查询速度，同时却会降低更新表的速度,如果对表INSERT,UPDATE和DELETE。因为更新表时，MySQL不仅要修改存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息\n2）索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立优秀的索引，或优化查询语句\n")])])]),a("h3",{attrs:{id:"mysql的索引文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql的索引文件"}},[t._v("#")]),t._v(" mysql的索引文件")]),t._v(" "),a("blockquote",[a("p",[t._v("在msql5.6版本中，如果是MyIsam引擎：那么一个表有三个文件，")])]),t._v(" "),a("p",[t._v("如：C:\\dev\\mysql\\data\\mysql\\下的columns_priv表，就有columns_priv.frm（表结构文件），columns_priv.MYD（表数据文件），columns_priv.MYI（表索引文件）")]),t._v(" "),a("p",[t._v("在msql5.6版本中，如果是InnoDB引擎：对于每一个表，都有一个xxx.frm的表结构文件和xxx.ibd的文件，这个xxx.ibd文件就是存放表的数据和表的索引的文件，也就是表的索引文件和数据文件保存到了一个文件中，注意：xxx.ibd文件默认是隐藏的，如：C:\\ProgramData\\MySQL\\MySQL Server 5.5\\data\\hospital目录里面我们只能看到hospital库的表的结构文件，看不到ibd文件。")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("show variables like '%per_table%'   #可以发现默认是off\nset @@global.innodb_file_per_table=on;\n")])])]),a("p",[t._v("另外在mysql8的版本中，show variables like '%per_table%'默认是on，另外在myql8中，并不单独提供xxx.frm表结构文件，而是合并在xxx.ibd文件中，Oracle官方将frm文件的信息以及更多信息移动到叫做序列化字典（SDI），SDI倍写在ibd文件内部")]),t._v(" "),a("h2",{attrs:{id:"索引-结构-语法-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引-结构-语法-分类"}},[t._v("#")]),t._v(" 索引 结构 语法 分类")]),t._v(" "),a("h3",{attrs:{id:"索引结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引结构"}},[t._v("#")]),t._v(" 索引结构")]),t._v(" "),a("h4",{attrs:{id:"btree树结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#btree树结构"}},[t._v("#")]),t._v(" BTREE树结构")]),t._v(" "),a("h4",{attrs:{id:"hash结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash结构"}},[t._v("#")]),t._v(" hash结构")]),t._v(" "),a("blockquote",[a("p",[t._v("是指使用某种哈希函数实现key->value 映射的索引结构")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Hash索引只有 Memory, NDB两种引擎支持，Memory引擎默认支持Hash索引，如果多个hash值相同，出现哈希碰撞，那么索引以链表方式存储。NoSql采用此中索引结构。由于HASH的唯一（几乎100%的唯一）及类似键值对的形式，很适合作为索引。HASH索引可以一次定位，不需要像树形索引那样逐层查找,因此具有极高的效率。但是，这种高效是有条件的，即只在“=”和“in”条件下高效，对于范围查询、排序及组合索引仍然效率不高。\n\n因此，哈希索引适用于等值检索，通过一次哈希计算即可定位数据的位置\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20210706194207799.png",alt:"image-20210706194207799"}})]),t._v(" "),a("h4",{attrs:{id:"full-text全文索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-text全文索引"}},[t._v("#")]),t._v(" full-text全文索引")]),t._v(" "),a("blockquote",[a("p",[t._v("全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用【分词技术】等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果")])]),t._v(" "),a("p",[a("strong",[t._v("全文索引用match+against方式查询：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("不同于like方式的的查询：SELECT * FROM article WHERE content LIKE ‘%查询字符串%’;")])]),t._v(" "),a("li",[a("p",[t._v('SELECT * FROM article WHERE MATCH(title,content) AGAINST (‘查询字符串’); 明显的提高查询效率。它的出现是为了解决WHERE name LIKE “%word%"这类针对文本的模糊查询效率较低的问题。')])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("注意：mysql5.6.4以前只有Myisam支持，5.6.4版本以后innodb才支持，但是官方版本不支持中文分词，需要第三方分词插件。5.7以后官方支持中文分词。随着大数据时代的到来，关系型数据库应对全文索引的需求已力不从心，逐渐被 solr,elasticSearch等专门的搜索引擎所替代。在全文检索中，又分正排索引和倒排索引，也就是说正排索引和倒排索引，针对是全文的检索，MySQL既不是倒排索引，也不是正排索引\n")])])]),a("h4",{attrs:{id:"r-tree索引-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#r-tree索引-了解"}},[t._v("#")]),t._v(" R-Tree索引(了解)")]),t._v(" "),a("p",[t._v("R-Tree在mysql很少使用，仅支持geometry数据类型，支持该类型的存储引擎只有myisam、bdb、innodb、ndb、archive几种。相对于b-tree，"),a("strong",[t._v("r-tree的优势在于范围查找")])]),t._v(" "),a("h4",{attrs:{id:"聚簇与非聚簇索引区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚簇与非聚簇索引区别"}},[t._v("#")]),t._v(" 聚簇与非聚簇索引区别")]),t._v(" "),a("p",[t._v("mysql的索引类型跟存储引擎是相关的，innodb存储引擎数据文件跟索引文件全部放在ibd文件中，而myisam的数据文件放在扩展名为myd文件中，索引放在扩展名为myI文件中，")]),t._v(" "),a("p",[a("strong",[t._v("其实区分聚族索引和非聚族索引非常简单，只要判断数据跟索引是否存储在一起就可以了。")])]),t._v(" "),a("p",[t._v("innodb存储引擎在进行数据插入的时候，数据必须要限索引放在一起,如果有主键就使用主键，没有主键就使用唯一键，没有唯一键就使用6字节的rowid,因此跟数据绑定在一起的就是聚簇索引， 而为了避免数据冗余存储，其他的索引的叶子节点中存储的都是聚族索引的key值，因此innodb中既有聚簇索引也有非聚簇索引，而myisam中只有非聚簇索引。")]),t._v(" "),a("p",[t._v("注意事项：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1）、在innodb引擎中，一个表最多只能有一个聚簇索引，一个表也必须有一个聚簇索引\n2）、只有innodb数据引擎支持聚簇索引，myisam不支持，在innodb中，采用主键作为聚簇索引\n3）、如果当前表中没有主键，mysql将会选择一个唯一性的字段作为聚簇索引\n4）、如果当前表既没有主键字段，也没有添加唯一约束字段，mysql将随机选取一个字段作为聚簇索引\n5）、在表中其它字段上创建的索引都是非聚簇索引\n")])])]),a("h3",{attrs:{id:"索引的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的语法"}},[t._v("#")]),t._v(" 索引的语法")]),t._v(" "),a("h4",{attrs:{id:"创建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建索引"}},[t._v("#")]),t._v(" 创建索引")]),t._v(" "),a("p",[t._v("1）CREATE [UNIQUE] INDEX  索引名 ON 表名(列名);")]),t._v(" "),a("p",[t._v("2）ALTER TABLE 表名  ADD [UNIQUE]  INDEX [索引名] ON(列名);")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- ALTER有四种方式来添加数据表的索引：\n-- 1.该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。\nALTER TABLE 表名 ADD PRIMARY KEY (列名)\n-- 2.这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。\nALTER TABLE 表名 ADD UNIQUE 索引名 (列名)\n-- 3.添加普通索引，索引值可出现多次。\nALTER TABLE 表名 ADD INDEX 索引名 (列名)\n-- 4.该语句指定了索引为 FULLTEXT ，用于全文索引。\nALTER TABLE 表名 ADD FULLTEXT 索引名 (列名)\n")])])]),a("h4",{attrs:{id:"查看索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看索引"}},[t._v("#")]),t._v(" 查看索引")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("show index from 表名\n")])])]),a("h4",{attrs:{id:"删除索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除索引"}},[t._v("#")]),t._v(" 删除索引")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP INDEX 索引名 ON 表名;\n")])])]),a("h3",{attrs:{id:"索引分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引分类"}},[t._v("#")]),t._v(" 索引分类")]),t._v(" "),a("h4",{attrs:{id:"单值索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单值索引"}},[t._v("#")]),t._v(" 单值索引")]),t._v(" "),a("blockquote",[a("p",[t._v("即一个索引只包含单个列，一个表可以有多个单列索引")])]),t._v(" "),a("p",[t._v("说明：索引建立成哪种索引类型？根据数据引擎类型自动选择的索引类型。innodb引擎都采用B+Tree索引，而且innodb 引擎的主键索引默认为聚簇索引，myisam "),a("strong",[t._v("则都采用的")]),t._v(" "),a("strong",[t._v("B-TREE")]),t._v("索引")]),t._v(" "),a("p",[a("strong",[t._v("创建索引，并指定主键索引")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> CREATE TABLE customer (id INT(10)  PRIMARY KEY AUTO_INCREMENT ,customer_no VARCHAR(200),customer_name VARCHAR(200)\n);\n")])])]),a("p",[a("strong",[t._v("创建单值索引")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> create index 索引名 ON 表名(列名)\nmysql> create index idx_customer_name ON customer(customer_name)\n")])])]),a("p",[a("strong",[t._v("查询索引")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> show index from 表名;   #这个表其实就有2个索引\nmysql> show index from customer;   #这个表其实就有2个索引\n")])])]),a("p",[a("strong",[t._v("删除索引")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP INDEX 索引名 on 表名 ;\nDROP INDEX idx_customer_name on customer ;\n")])])]),a("h4",{attrs:{id:"唯一索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引"}},[t._v("#")]),t._v(" 唯一索引")]),t._v(" "),a("blockquote",[a("p",[t._v("如果当前表中字段添加了唯一性约束，mysql主动的将当前字段上的数据进行排序，其生成的索引就是唯一索引，索引列的值必须唯一，但允许有空值")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE customer (id int primary key not null auto_increment,\ncustomer_no varchar(16),customer_name VARCHAR(200),UNIQUE key(customer_no)\n);\n\n## 单独建唯一索引：\ncreate unique index idx_customer_no ON customer(customer_no); \ncreate unique index 索引名称 ON 表名(列名); \n")])])]),a("p",[t._v("注：建立唯一索引时必须保证所有的值是唯一的（除了null），若有重复数据，会报错。")]),t._v(" "),a("h4",{attrs:{id:"复合-组合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复合-组合索引"}},[t._v("#")]),t._v(" 复合| 组合索引")]),t._v(" "),a("blockquote",[a("p",[t._v("在数据库操作期间，用户可以在多个列上建立索引,这种索引叫做复合索引(组合索引)，即一个索引包含多个列，复合索引比单值索引所需要的开销更小(对于相同的多个列建索引)")])]),t._v(" "),a("p",[a("strong",[t._v("防坑指南")])]),t._v(" "),a("ul",[a("li",[t._v("查询的条件顺序建议跟索引的顺序一致 | 不一致时会自动优化顺序 (最左原则)")]),t._v(" "),a("li",[t._v("最左原则: 必须保证 条件和索引的第一个值  在条件里必须存在")]),t._v(" "),a("li",[t._v("如果查询的条件 有范围 则后面的索引必然的失效 导致排序")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("create table customer(id int(10) UNSIGNED primary key auto_increment,customer_no varchar(200),customer_name varchar(200),unique key(customer_name),key(customer_no,customer_name))\n \n## 单独建索引：\ncreate index 索引名 on 表名(列名1, 列名2, 列名3)\ncreate index idx_no_name on customer(customer_no,customer_name);\n")])])]),a("h4",{attrs:{id:"主键索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主键索引"}},[t._v("#")]),t._v(" 主键索引")]),t._v(" "),a("blockquote",[a("p",[t._v("如果当前表中字段添加了主键约束，mysql主动的将当前字段上数据进行排序，其生成的索引就是主键索引，"),a("strong",[t._v("设定为主键后数据库会自动建立索引")]),t._v("，在innodb引擎中，这种索引也是聚簇索引结构")])]),t._v(" "),a("p",[a("strong",[t._v("注：使用 AUTO_INCREMENT 关键字的列必须有索引(只要有索引就行)。")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("create table customer(id int(10) UNSIGNED auto_increment,customer_no varchar(200),customer_name varchar(200),primary key(id))\n")])])]),a("h3",{attrs:{id:"如何合理创建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何合理创建索引"}},[t._v("#")]),t._v(" 如何合理创建索引")]),t._v(" "),a("h4",{attrs:{id:"建议创建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建议创建索引"}},[t._v("#")]),t._v(" 建议创建索引")]),t._v(" "),a("p",[t._v("1.主键自动建立唯一索引")]),t._v(" "),a("p",[t._v("2.频繁作为查询的条件的字段应该创建索引")]),t._v(" "),a("p",[t._v("3.查询中与其他表关联的字段，外键关系建立索引")]),t._v(" "),a("p",[t._v("4.频繁更新的字段不适合创建索引（因为每次更新不单单是更新了记录还会更新索引，加重IO负担）")]),t._v(" "),a("p",[t._v("5.查询中排序的字段，排序字段若通过索引去访问将大大提高排序的速度")]),t._v(" "),a("p",[t._v("6.查询中统计或者分组字段")]),t._v(" "),a("h4",{attrs:{id:"不建议创建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不建议创建索引"}},[t._v("#")]),t._v(" 不建议创建索引")]),t._v(" "),a("p",[t._v("1.表记录太少")]),t._v(" "),a("p",[t._v("2.经常增删改的表")]),t._v(" "),a("p",[t._v("3.数据重复且分布平均的表字段，因此应该只为经常查询和经常排序的数据列建立索引。")]),t._v(" "),a("p",[t._v("注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果")]),t._v(" "),a("h2",{attrs:{id:"mysql-性能分析及调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-性能分析及调优"}},[t._v("#")]),t._v(" Mysql 性能分析及调优")]),t._v(" "),a("h3",{attrs:{id:"explain-性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explain-性能分析"}},[t._v("#")]),t._v(" Explain 性能分析")]),t._v(" "),a("blockquote",[a("p",[t._v("在Mysql中，有一个专门负责优化SELECT语句的优化器模块（Mysql Query optimizer（优化）)")])]),t._v(" "),a("h4",{attrs:{id:"主要功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要功能"}},[t._v("#")]),t._v(" 主要功能：")]),t._v(" "),a("ul",[a("li",[t._v("通过计算分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划 ，当客户端向MySQL请求一条Query语句到命令解析器模块完成请求分类区别出是SELECT并转发给QueryOptimizer之后，QueryOptimizer首先会对整条Query进行优化处理掉一些常量表达式的预算，直接换算成常量值。")]),t._v(" "),a("li",[t._v("并对Query中的查询条件进行简化和转换，如去掉一些无用或者显而易见的条件，结构调整等等。然后则是分析Query中的Hint信息（如果有），看显示Hint信息是否可以完全确定该Query的执行计划。")]),t._v(" "),a("li",[t._v("如果没有Hint或者Hint信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划")])]),t._v(" "),a("h3",{attrs:{id:"explain-详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explain-详解"}},[t._v("#")]),t._v(" Explain 详解")]),t._v(" "),a("p",[t._v("使用EXPLAIN关键字可以模拟优化器执行SQL语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是结构的性能瓶颈")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220819114220876.png",alt:"image-20220819114220876"}})]),t._v(" "),a("h4",{attrs:{id:"id-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#id-列"}},[t._v("#")]),t._v(" ID 列")]),t._v(" "),a("blockquote",[a("p",[t._v("id：包含一组数字，表示查询中执行select子句或操作表的顺序，")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果id相同，执行顺序由上至下，可以认为是一组，从上往下顺序执行，")])]),t._v(" "),a("li",[a("p",[t._v("在所有组中，id值越大，优先级越高，越先执行；")])]),t._v(" "),a("li",[a("p",[t._v("如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行")])])]),t._v(" "),a("h4",{attrs:{id:"select-type-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-type-列"}},[t._v("#")]),t._v(" select_type 列")]),t._v(" "),a("blockquote",[a("p",[t._v("表示查询中每个select子句的类型：SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION、UNION RESULT")])]),t._v(" "),a("ul",[a("li",[t._v("SIMPLE：查询中不包含子查询或者UNION")]),t._v(" "),a("li",[t._v("PRIMARY：查询中若包含任何复杂的子部分，最外层查询则被标记为")]),t._v(" "),a("li",[t._v("SUBQUERY：在SELECT或WHERE列表中包含了子查询，该子查询被标记为SUBQUERY")]),t._v(" "),a("li",[t._v("DERIVED：在FROM列表中包含的子查询被标记为：DERIVED（衍生）")]),t._v(" "),a("li",[t._v("UNION：若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED")]),t._v(" "),a("li",[t._v("从UNION表获取结果的SELECT被标记为：UNION RESULT")])]),t._v(" "),a("h4",{attrs:{id:"table-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-列"}},[t._v("#")]),t._v(" table 列")]),t._v(" "),a("blockquote",[a("p",[t._v("显示这一行数据时关于哪个表的")])]),t._v(" "),a("h4",{attrs:{id:"type-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-列"}},[t._v("#")]),t._v(" type 列")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("表示MySQL在表中找到所需行的方式，又称“访问类型”")])]),t._v(" "),a("li",[a("p",[t._v("type 扫描方式由快到慢："),a("strong",[t._v("system > const > eq_ref > ref > range > index > ALL")])])]),t._v(" "),a("li",[a("p",[t._v("总结："),a("strong",[t._v("一般来说，得保证查询只是达到range级别，最好达到ref")])])])]),t._v(" "),a("blockquote",[a("h6",{attrs:{id:"system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system"}},[t._v("#")]),t._v(" system")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 它是const联接类型的特例，表只有一行记录（等于系统表），很少出现")]),t._v("\n")])])]),a("blockquote",[a("h6",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 通过索引一次就能找到，速度非常快。const用于比较【primary key或者unique索引】")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 被连接的部分是一个常量值（const），只匹配一行数据，所以很快。通常将主键至于where列表中")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" employee "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("h6",{attrs:{id:"eq-ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eq-ref"}},[t._v("#")]),t._v(" eq_ref")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 对于前表中的每一行（row），对应后表只有一行被扫描，这类扫描的速度也非常的快。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 应用场景：1.联表（join）查询；2.命中主键或者非空唯一索引；3.等值连接")]),t._v("\n")])])]),a("blockquote",[a("h6",{attrs:{id:"ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[t._v("#")]),t._v(" ref")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 非唯一性索引扫描，返回匹配某个单独值的所有行，场景：联表查询普通非唯一索引 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 由于后表使用了`普通非唯一索引`，对于前表`user1`表的每一行(row)，后表`user_balance`表可能有多于一行的数据被扫描")]),t._v("\n")])])]),a("blockquote",[a("h6",{attrs:{id:"range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#range"}},[t._v("#")]),t._v(" range")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 一般就是在你的where语句中出现了between、<、>、in等的查询，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 这种范围扫描索引扫描比全表扫描要好，因为他只需要开始索引的某一点，而结束语另一点，不用扫描全部索引")]),t._v("\n")])])]),a("blockquote",[a("h6",{attrs:{id:"index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index"}},[t._v("#")]),t._v(" index")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- index与ALL区别为index类型只遍历索引树。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 这通常比ALL快，只快一点，因为索引文件通常比数据文件小。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--（也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的）")]),t._v("\n")])])]),a("blockquote",[a("h6",{attrs:{id:"all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[t._v("#")]),t._v(" All")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- all：Full Table Scan， MySQL将遍历全表以找到匹配的行")]),t._v("\n")])])]),a("h4",{attrs:{id:"possible-keys-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#possible-keys-列"}},[t._v("#")]),t._v(" possible_keys  列")]),t._v(" "),a("p",[t._v("显示可能应用在这张表中的索引一个或多个。查询涉及的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用，这是理论分析")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" employee "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20210706213624564.png",alt:"image-20210706213624564"}})]),t._v(" "),a("h4",{attrs:{id:"key-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-列"}},[t._v("#")]),t._v(" key 列")]),t._v(" "),a("p",[t._v("实际使用的索引，如果为null则没有使用索引，如果不为null，则表示使用了索引，有可能使用了覆盖索引")]),t._v(" "),a("p",[a("strong",[t._v("覆盖索引：只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快")])]),t._v(" "),a("blockquote",[a("p",[t._v("覆盖索引")])]),t._v(" "),a("p",[a("strong",[t._v("使用覆盖索引的常见的方法是：将被查询的字段，建立到联合索引里去")])]),t._v(" "),a("ul",[a("li",[t._v("id 字段是聚簇索引，age 字段是普通索引（二级索引）")]),t._v(" "),a("li",[t._v("id 的树的叶子节点包含了行数据 而age的数节点并没有行数据只有对应的id")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 索引的存储结构：id 是主键，所以是聚簇索引，其叶子节点存储的是对应行记录的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果查询条件为主键（聚簇索引），则只需扫描一次B+树即可通过聚簇索引定位到要查找的行记录数据。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// age 是普通索引（二级索引），非聚簇索引，其叶子节点存储的是聚簇索引的的值")]),t._v("\n    \n如果查询条件为普通索引（非聚簇索引），需要扫描两次"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("树，第一次扫描通过普通索引定位到聚簇索引的值，然后第二次扫描通过聚簇索引的值定位到要查找的行记录数据，这种也叫回表操作，所谓回表操作：先通过普通索引的值定位聚簇索引值，再通过聚簇索引的值定位行记录数据，需要扫描两次索引"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("树，它的性能较扫一遍索引树更低\n")])])]),a("h4",{attrs:{id:"key-len-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-len-列"}},[t._v("#")]),t._v(" key_len 列")]),t._v(" "),a("blockquote",[a("p",[t._v("表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。")])]),t._v(" "),a("p",[t._v("在不损失精确性的情况下，长度越短越好,key_len显示的值为索引最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的，如果实际上用到索引，则有索引的长度，否则为null")]),t._v(" "),a("h4",{attrs:{id:"ref-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref-列"}},[t._v("#")]),t._v(" ref 列")]),t._v(" "),a("blockquote",[a("p",[t._v("显示使用哪个列或常数与key一起从表中选择行")])]),t._v(" "),a("h4",{attrs:{id:"rows-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rows-列"}},[t._v("#")]),t._v(" rows 列")]),t._v(" "),a("blockquote",[a("p",[t._v("显示MySQL认为它执行查询时必须检查的行数，")])]),t._v(" "),a("p",[t._v("这个数字是内嵌循环关联计划里的循环数目，也就是说它不是MySql认为它最终要从表里读取出来的行数，而是MySql为了找到符合查询的每一点上标准的那些行而必须读取的行的平均数")]),t._v(" "),a("h4",{attrs:{id:"extra-列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extra-列"}},[t._v("#")]),t._v(" extra 列")]),t._v(" "),a("p",[a("strong",[t._v("这一列包含的是不适合在其他列显示的额外信息，其值有：")])]),t._v(" "),a("p",[t._v("1.Using filesort：mysql会对数据使用一个外部的索引排序，而不是"),a("strong",[t._v("按照表内的索引顺序进行")]),t._v('读取，MySQL中无法用索引完成排序操作成为“文件排序"，极大影响mysql性能，需要尽快优化')]),t._v(" "),a("blockquote",[a("p",[t._v("排序的时候最好遵循所建索引的顺序与个数否则就可能会出现usering filesort")])]),t._v(" "),a("p",[t._v("2.Using temporary： 使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表，极大影响mysql性能，需要尽快优化，常见于排序order by 和分组查询 group by")]),t._v(" "),a("blockquote",[a("p",[t._v("结论：group by一定要遵循所建索引的顺序与个数")])]),t._v(" "),a("p",[t._v("3.Using index：表示相应的select操作中使用了覆盖索引(covering index)，避免回表操作，效率good")]),t._v(" "),a("p",[t._v("4.Using where：表名使用了where过滤，效率一般")]),t._v(" "),a("blockquote",[a("p",[t._v("其中using filesort，using temporary，using index最为常见，出现前两种表示是需要优化的地方，出现第三种表示索引效率不错，如果值是null，则表明要进行回表操作")])]),t._v(" "),a("h3",{attrs:{id:"mysql-调优-索引优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-调优-索引优化"}},[t._v("#")]),t._v(" Mysql 调优-索引优化")]),t._v(" "),a("h4",{attrs:{id:"单表优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单表优化"}},[t._v("#")]),t._v(" 单表优化")]),t._v(" "),a("blockquote",[a("p",[t._v("对于单表查询，根据 where 后面的字段建立索引，遇到有 <、>、!= 这样的关系运算符，会使已经建完的索引失效")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- type 变成了 range,这是可以忍受的。但是 extra 里使用 Using filesort 仍是无法接受的。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 但是我们已经建立了索引,为啥没用呢?这是因为按照 BTree 索引的工作原理,先排序 category_id,如果遇到相同的 category_id 则再排序 comments,如果遇到相同的 comments 则再排序 views。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 当 comments 字段在联合索引里处于中间位置时,因comments > 1 条件是一个范围值(所谓 range),MySQL 无法利用索引再对后面的 views 部分进行检索,即 range 类型查询字段后面的索引无效")]),t._v("\n")])])]),a("h4",{attrs:{id:"两表优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两表优化"}},[t._v("#")]),t._v(" 两表优化")]),t._v(" "),a("blockquote",[a("p",[t._v("注意: 因为 左连接在查询时已经全表查了 还未到wheel条件那 则必须到查询右表的时候配合where条件建立索引")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("左连接，一定要要把索引创建到右表上")])]),t._v(" "),a("li",[a("p",[t._v("右连接，一定要要把索引创建到左表上")])])]),t._v(" "),a("h4",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、对于单表查询，一定要根据 where 后面的字段建立索引，遇到有 <、>、!= 这样的关系运算符，会使已经建完的索引失效\n2、对于双表查询，左外连接只会因为右表的索引而被优化，右外连接只会因为左表的索引而被优化，内连接则因为两个表的索引都可以被优化\n3、对于三表查询，则根据是左连接对右边的连接建立索引，根据右连接对左边的连接建立索引\n")])])]),a("h3",{attrs:{id:"索引失效情况-重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引失效情况-重点"}},[t._v("#")]),t._v(" 索引失效情况（重点）")]),t._v(" "),a("p",[t._v("1、组合索引不遵循最左匹配原则会导致索引失效")]),t._v(" "),a("p",[t._v("2、组合索引的前面索引列使用范围查询(<>,like)会导致后续的索引失效")]),t._v(" "),a("p",[t._v("3、不要在索引上做任何操作(计算，函数，类型转换)")]),t._v(" "),a("p",[t._v("4、is null和is not null无法使用索引")]),t._v(" "),a("p",[t._v("5、尽量少使用or操作符，否则连接时索引会失效")]),t._v(" "),a("p",[t._v("6、字符串不添加引号会导致索引失效")]),t._v(" "),a("p",[t._v("7、两表关联使用的条件字段中字段的长度、编码不一致会导致索引失效")]),t._v(" "),a("p",[t._v("8、like语句中，以%开头的模糊查询，会导致索引失效")]),t._v(" "),a("p",[t._v("9、如果mysq|中使用全表扫描比使用索引快，也会导致索引失效")]),t._v(" "),a("h3",{attrs:{id:"索引注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引注意点"}},[t._v("#")]),t._v(" 索引注意点")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"最好全值匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最好全值匹配"}},[t._v("#")]),t._v(" 最好全值匹配")])]),t._v(" "),a("p",[t._v("建立几个复合索引字段，最好就用上几个字段。且按照顺序来用")]),t._v(" "),a("p",[t._v("如：索引idx_staffs_nameAgePos 建立索引时以 name ， age ，pos 的顺序建立的。全值匹配表示按顺序匹配的")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"最佳左前缀法则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最佳左前缀法则"}},[t._v("#")]),t._v(" 最佳左前缀法则")])]),t._v(" "),a("p",[t._v("如果索引了多列，要遵守最左前缀法则，指的是查询从索引的最左前列（即name索引列）开始，不跳过索引中间的列（即age索引列）。")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"不在索引列上做任何操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不在索引列上做任何操作"}},[t._v("#")]),t._v(" 不在索引列上做任何操作")])]),t._v(" "),a("p",[t._v("不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），否则会导致索引失效而转向全表扫描")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"范围之后全失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范围之后全失效"}},[t._v("#")]),t._v(" 范围之后全失效")])]),t._v(" "),a("p",[t._v("存储引擎不能使用索引列作为范围条件比较，范围条件右边的列都失效。（范围之后全失效），若中间索引列用到了范围（>、<、like等），则后面的所以全失效")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"尽量使用覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尽量使用覆盖索引"}},[t._v("#")]),t._v(" 尽量使用覆盖索引")])]),t._v(" "),a("p",[t._v("尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，少用select * 查询 ，即不要查询所有列")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"不要使用不等于-或者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要使用不等于-或者"}},[t._v("#")]),t._v(" 不要使用不等于(!= 或者<>)")])]),t._v(" "),a("p",[t._v("mysql 在使用不等于(!= 或者<>)的时候无法使用索引会导致全表扫描")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"is-not-null-也无法使用索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-not-null-也无法使用索引"}},[t._v("#")]),t._v(" is not null 也无法使用索引")])]),t._v(" "),a("p",[t._v("is not null和is null 也无法使用索引")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"like以通配符开头-abc-索引失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#like以通配符开头-abc-索引失效"}},[t._v("#")]),t._v(" like以通配符开头('%abc...')索引失效")])]),t._v(" "),a("p",[t._v("like以通配符开头('%abc...')mysql索引失效会变成全表扫描的操作")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在实际开发中，有时就是要把%写到左右两边，如何也能用上索引，不让索引失效？")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用覆盖索引，建的索引和查的字段个数顺序最好完全一致")]),t._v("\n")])])]),a("blockquote",[a("h5",{attrs:{id:"字符串不加单引号索引失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串不加单引号索引失效"}},[t._v("#")]),t._v(" 字符串不加单引号索引失效")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("EXPLAIN SELECT * FROM staffs WHERE name = 2000;\n")])])]),a("p",[t._v("数据库会把2000隐式的自动的转换为String类型，但是在索引列上做任何操作（计算，函数，（自动or手动）类型转换），会使索引失效")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"少用or-用它来连接时会索引失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#少用or-用它来连接时会索引失效"}},[t._v("#")]),t._v(" 少用or,用它来连接时会索引失效")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('EXPLAIN SELECT * FROM staffs WHERE name  like "abc%" or age = 23\n')])])]),a("h2",{attrs:{id:"mysql-表数据操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-表数据操作"}},[t._v("#")]),t._v(" MySql 表数据操作")]),t._v(" "),a("h3",{attrs:{id:"ddl-表-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddl-表-操作"}},[t._v("#")]),t._v(" DDL: 表 操作")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建表")]),t._v("\n​\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("列名 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除表")]),t._v("\n​\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("drop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 修改表-添加列")]),t._v("\n​\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" 列名 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查看数据库的所有表")]),t._v("\n​\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tables")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"表字段-约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表字段-约束"}},[t._v("#")]),t._v(" 表字段 约束")]),t._v(" "),a("p",[t._v("约束可以让字段列名的值进行规范 约束加在字段后")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 约束:")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 非空约束 -- 数据不能为空")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 唯一约束 -- 数据具有唯一性,不能重复")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unique")]),t._v("  \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 默认约束 -- 数据为空时使用默认值数据")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" 默认值 \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 检查约束 -- 检查数据是否为选定值,数据可以为空值")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("check")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 主键约束 -- 主键不能为空不能重复 表中只有一个主键,约束了主键的唯一性")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("primary")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 自增约束 -- 实现主键的自动增长 可以不赋值,可以指定值,但是每次自增长都以最大值自增")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto_increment")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 外键约束 -- 外键只能关联到另外一个表的主键,并且只能使用主键已存在的数据 ")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 配合使用在主键上,可以赋值为null,但会自增覆盖空值")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreign")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("外键名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("references")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("主键名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 去重 | DISTINCT")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n")])])]),a("h3",{attrs:{id:"字段类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字段类型"}},[t._v("#")]),t._v(" 字段类型")]),t._v(" "),a("h4",{attrs:{id:"数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值"}},[t._v("#")]),t._v(" 数值")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 整数:")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 浮点数:")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 单精度: 八位")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 双精度: 十六位  -- 可在后面加约束,如double(m,d)  m为最大长度,d为小数的长度")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decimal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 定点数:适用于金额 参数m<65总个数,d<30且d<m为小数位,浮点型存放的是近似值，而定点类型是精确值。")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('-- 注意: 在java里 关于金额的数据 可使用 BigDecimal 类型对应 赋值 new BigDecimal("1002"); 推荐使用双引号')]),t._v("\n")])])]),a("h4",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 字符串")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 固定长度-255字符 n:表示不能超过此长度-当char(n)长度不足n时也按n计算长度")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 可变长度-65535字符")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tinytext")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 单可变长度-225字符")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("text")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 可变长度-65535字符 富文本编辑器")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mediumtext")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 可变长度-2的24次方")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("longtext")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 可变长度-2的32次方")]),t._v("\n")])])]),a("h4",{attrs:{id:"日期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期"}},[t._v("#")]),t._v(" 日期")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 日期")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ' 年 - 月 - 日 '")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("time")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ' 时 : 分 : 秒 '")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("datetime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ' 年 - 月 - 日  时 : 分 : 秒 '")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 添加该函数可使用系统当前时间 sysdate()")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("timestamp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 自动储存记录修改时间 若定义一个字段为timestamp，这个字段里的时间数据会随其他字段修改的时候自动刷新，所以这个数据类型的字段可以存放这条记录最后被修改的时间。")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 注意: 在java 时间类型可对应 string  在映射文件进行表数据的追加 now() 表示追加当前的系统时间")]),t._v("\n")])])]),a("h3",{attrs:{id:"dml-增删改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dml-增删改"}},[t._v("#")]),t._v(" DML: 增删改")]),t._v(" "),a("h4",{attrs:{id:"insert-增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insert-增"}},[t._v("#")]),t._v(" insert 增")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 向表中的所有列新增数据 列名-类型-都要对应")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 指定列插入数据 可插入多个列名,用逗号隔开,也要对应值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'值'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'值1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 添加多行数据")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"delete-删"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-删"}},[t._v("#")]),t._v(" delete 删")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除指定列中的指定值行 --\x3e and - 且  or - 或")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 清空表所有的数据")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 根据id批量删除")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"update-改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-改"}},[t._v("#")]),t._v(" update 改")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 修改指定行的列值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("新值 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 修改指定行的列值基础增加")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("值 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 修改指定行的多个列值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("新值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("新值 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 根据id批量修改")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 修改值 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"dql-查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dql-查询"}},[t._v("#")]),t._v(" DQL: 查询")]),t._v(" "),a("h4",{attrs:{id:"基本查询-瑟莱特"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本查询-瑟莱特"}},[t._v("#")]),t._v(" 基本查询 | 瑟莱特")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 语法  select 列名...... from 表名 where 条件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询所有信息(*代表所有列)")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询时更改列名(显示作用)")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'新名字'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询列值的范围")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" 最小值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" 最大值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" 最小值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" 最大值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询多行列值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("列值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" 相当于多个 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询包含/开头/结尾")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%值%'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 值"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"关联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联查询"}},[t._v("#")]),t._v(" 关联查询")]),t._v(" "),a("h5",{attrs:{id:"内连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接"}},[t._v("#")]),t._v(" 内连接")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("特点:")]),t._v(" 只会查询两张表重和的部分 其余的则不会查询出来")])]),t._v(" "),a("p",[a("strong",[t._v("语法:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 内")]),t._v("\n\t语法 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("外键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("主键\n\t语法 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inner")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("外键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("主键\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220819125858951.png",alt:"image-20220819130836662"}})]),t._v(" "),a("h5",{attrs:{id:"外-左连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外-左连接"}},[t._v("#")]),t._v(" 外/左连接")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("特点:")]),t._v(" 以左表为主全部查询出来 如果右表部分没数据则以null")])]),t._v(" "),a("p",[a("strong",[t._v("语法:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 外")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 左外连接(以左表为主表,会把左表数据全部查询出来)")]),t._v("\n\t语法 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n\t语法 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 配合 表2 的外键为 null 可 左表且不重合的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n")])])]),a("img",{staticStyle:{zoom:"150%"},attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220819130316462.png",alt:"image-20220819130316462"}}),t._v(" "),a("h5",{attrs:{id:"外-右连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外-右连接"}},[t._v("#")]),t._v(" 外/右连接")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("特点:")]),t._v(" 以右表为主全部查询出来 如果左表部分没数据则以null")])]),t._v(" "),a("p",[a("strong",[t._v("语法:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 外")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 右外连接(以右表为主表,会把右表数据全部查询出来)")]),t._v("\n\t语法 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n\t语法 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 配合 表2 的外键为 null 可 左表且不重合的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("外键 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220819130443814.png",alt:"image-20220819130443814"}})]),t._v(" "),a("h5",{attrs:{id:"外连接-多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外连接-多表查询"}},[t._v("#")]),t._v(" 外连接 多表查询")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 多表连接")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("外键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("主键 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"全外查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全外查询"}},[t._v("#")]),t._v(" 全外查询")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("特点:")]),t._v(" 以两张表为主 查询所有的数据 为空的以null填充")])]),t._v(" "),a("p",[a("strong",[t._v("语法:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220819131519212.png",alt:"image-20220819131519212"}})]),t._v(" "),a("h5",{attrs:{id:"全外-去除内连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全外-去除内连接"}},[t._v("#")]),t._v(" 全外(去除内连接)")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("特点:")]),t._v(" 以两张表为主 查询所有的数据 但会去除内连接查询的重合数据 为空的以null填充")])]),t._v(" "),a("p",[a("strong",[t._v("语法:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("外键\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 表"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("主键 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220819150605075.png",alt:"image-20220819150605075"}})]),t._v(" "),a("h2",{attrs:{id:"特殊条件值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊条件值"}},[t._v("#")]),t._v(" 特殊条件值")]),t._v(" "),a("h3",{attrs:{id:"运算符-判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符-判断"}},[t._v("#")]),t._v(" 运算符 - 判断")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 算术运算符 ")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 关系运算符")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--关系运算符的结果为真(用数字1表示)或者假(用数字0表示假)")]),t._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 范围的首和尾都包含")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 包含值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" 最小值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" 最大值\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--  为通配符,任意内容")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 指定字符开头")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你是我的月亮'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你%'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 指定字符结尾")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你是我的月亮'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%月亮'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 包含指定字符")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你是我的月亮'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%我的%'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 模糊 多个")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你是我的月亮'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%我, 月%'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你是我的月亮'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%我%, %月%'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你是我的月亮'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%我%月%'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 空判断")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n\t\t\t列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n\t\t\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 逻辑运算符 结果：真（1） 假（0）")]),t._v("\n\t非 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t与 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t或 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"分页-分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页-分组"}},[t._v("#")]),t._v(" 分页  -- 分组")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 分页 | 可控制查询的条数")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- limit 后面为一个值n时,表示从第一行开始-查询n行")]),t._v("\n\t\t语法: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- limit 后面为两个值m,n时,表示从m+1行开始-查询n行")]),t._v("\n\t\t语法: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 页码-pageNum 每页显示的行数-pageSize 表示")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pageNum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pageSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pageSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 聚合函数")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- avg-平均数 count-统计行数 max/min-最大/小值 sum-和")]),t._v("\n\t语法: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("  函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在使用函数时查询列名报错 any_value(列名)\t\t")]),t._v("\n\t\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 分组")]),t._v("\n\t语法: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("显示作用 函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" 分组列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 分组的语法通常需要跟聚合函数一起用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 多字段分组")]),t._v("\n\t语法: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("显示作用 函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" 分组列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 列明"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"条件-基本聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件-基本聚合函数"}},[t._v("#")]),t._v(" 条件 基本聚合函数")]),t._v(" "),a("blockquote",[a("p",[t._v("基本聚合函数")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 可配合分组使用 聚合函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在使用函数时查询列名报错 any_value(列名)")]),t._v("\navg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("平均数 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("统计行数 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("最大"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("小值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("和\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 聚合函数可进行条件判断")]),t._v("\nmax"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("min   最大"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("小值   条件 真"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 假"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nsum        和"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("相加    条件 真"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 假"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("条件聚合函数")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 表示 该列如果小于值 则 +1 否则 +0 最后统计总数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" 值 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 列别名\n")])])]),a("h3",{attrs:{id:"排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 排序")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- order by ... asc升序（默认）  desc降序")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 升序-以指定列名升序排序 -- asc可以省略")]),t._v("\n\t\t语法: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("asc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 降序-以指定列名降序排序 -- desc降序")]),t._v("\n\t\t语法: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"mysql-特殊函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-特殊函数"}},[t._v("#")]),t._v(" MySql 特殊函数")]),t._v(" "),a("h3",{attrs:{id:"时间类函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间类函数"}},[t._v("#")]),t._v(" 时间类函数")]),t._v(" "),a("h4",{attrs:{id:"获取现在时间函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取现在时间函数"}},[t._v("#")]),t._v(" 获取现在时间函数")]),t._v(" "),a("p",[t._v("详见: https://www.runoob.com/sql/sql-dates.html")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-now.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("NOW()")])]),t._v(" "),a("th",[t._v("返回当前的日期和时间")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-curdate.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CURDATE()")])]),t._v(" "),a("td",[t._v("返回当前的日期")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-curtime.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CURTIME()")])]),t._v(" "),a("td",[t._v("返回当前的时间")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-date.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("DATE()")])]),t._v(" "),a("td",[t._v("提取日期或日期/时间表达式的日期部分")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-extract.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("EXTRACT()")])]),t._v(" "),a("td",[t._v("返回日期/时间的单独部分")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-date-add.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("DATE_ADD()")])]),t._v(" "),a("td",[t._v("向日期添加指定的时间间隔")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-date-sub.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("DATE_SUB()")])]),t._v(" "),a("td",[t._v("从日期减去指定的时间间隔")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-datediff-mysql.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("DATEDIFF()")])]),t._v(" "),a("td",[t._v("返回两个日期之间的天数")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://www.runoob.com/sql/func-date-format.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("DATE_FORMAT()")])]),t._v(" "),a("td",[t._v("用不同的格式显示日期/时间")])])])]),t._v(" "),a("h4",{attrs:{id:"时间差列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间差列"}},[t._v("#")]),t._v(" 时间差列")]),t._v(" "),a("blockquote",[a("p",[t._v("可使用 timediff | 时间差 函数计算出两个时间的时间差为新的一列数据")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" timediff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"时间1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"时间2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" timediff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" seckill_endtime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" seckill\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("63")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("46")]),t._v("\n")])])]),a("h4",{attrs:{id:"时间差条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间差条件"}},[t._v("#")]),t._v(" 时间差条件")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/homelam/article/details/88647099",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mysql日期差函数，Mysql选择两个日期字段相差大于或小于一定时间_mysql 时间间隔大于")])]),t._v(" "),a("blockquote",[a("p",[t._v("FROM_UNIXTIME |  语法")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tpaylog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" TIMESTAMPDIFF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("时间差类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("时间"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 时间"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("时间差类型")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("FRAC_SECOND - 表示间隔是毫秒")])]),t._v(" "),a("li",[a("p",[t._v("SECOND - 秒")])]),t._v(" "),a("li",[a("p",[t._v("MINUTE - 分钟")])]),t._v(" "),a("li",[a("p",[t._v("HOUR - 小时")])]),t._v(" "),a("li",[a("p",[t._v("DAY - 天")])]),t._v(" "),a("li",[a("p",[t._v("WEEK - 星期")])]),t._v(" "),a("li",[a("p",[t._v("MONTH - 月")])]),t._v(" "),a("li",[a("p",[t._v("QUARTER - 季度")])]),t._v(" "),a("li",[a("p",[t._v("YEAR - 年")])])]),t._v(" "),a("blockquote",[a("p",[t._v("案例")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/m0_67394002/article/details/126113579")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 现在的时间 至 该字段的时间 差值 大于30分钟")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tpaylog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" TIMESTAMPDIFF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MINUTE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tpaylog_ordertime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tpaylog "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" TIMESTAMPDIFF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("时间差类型 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("时间字段"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 时间字段"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 值\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 类似函数 时间之差大于31天 | datediff(now(),时间字段) >= 31")]),t._v("\ndatediff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("busi_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 类似函数 时间之差小于于7天 | 时间字段 > DATE_SUB(now(),INTERVAL 7 时间单位);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("stock_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\nbusi_date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2022-11-11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTERVAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("day")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"时间转换格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间转换格式"}},[t._v("#")]),t._v(" 时间转换格式")]),t._v(" "),a("p",[t._v("详见: https://www.runoob.com/sql/func-date-format.html")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// date_format(时间字段, 时间格式) = 条件值")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// busi_date 时间字段 | 如: 2022-11-04 --\x3e 2022-11")]),t._v("\nselect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" from stock_in_order where\n    audit_status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" and category "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" and company_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v(" and status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    and "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date_format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("busi_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2022-10'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"entity.start != null and entity.start != ''\"")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    and "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date_format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m-%d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"entity.end != null and entity.end != ''\"")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    and "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date_format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m-%d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h4",{attrs:{id:"查询时间偏移数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询时间偏移数据"}},[t._v("#")]),t._v(" 查询时间偏移数据")]),t._v(" "),a("p",[t._v("详见: https://blog.csdn.net/weixin_49071539/article/details/116458017")]),t._v(" "),a("p",[t._v("​\t\t  https://www.cnblogs.com/wjw1014/p/12917335.html")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 今天")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" to_days"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" to_days"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 昨天")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" TO_DAYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" TO_DAYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 7天")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CURDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTERVAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DAY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 近30天")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CURDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTERVAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DAY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 本月")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DATE_FORMAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DATE_FORMAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" CURDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 上一月 | 使用now()可用 字符串时间字段'2022-10-1'可用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" PERIOD_DIFF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询本季度数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询上季度数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询本年数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询上年数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询当前这周的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" enterprise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("submittime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m-%d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询上周的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" enterprise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("submittime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m-%d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询当前月份的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" enterprise   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("submittime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询距离当前现在6个月的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" enterprise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" submittime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" date_sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n​"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 近30天")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CURDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTERVAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DAY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 本月")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DATE_FORMAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DATE_FORMAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" CURDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 上一月")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" PERIOD_DIFF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 时间字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y%m'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询本季度数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询上季度数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" QUARTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询本年数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("YEAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询上年数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("ht_invoice_information"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询当前这周的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" enterprise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("submittime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m-%d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询上周的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" enterprise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("submittime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m-%d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" YEARWEEK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询当前月份的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" enterprise   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("submittime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("date_format"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%Y-%m'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询距离当前现在6个月的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("submittime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" enterprise "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" submittime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" date_sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"数学函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数学函数"}},[t._v("#")]),t._v(" 数学函数")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/qq_43842093/article/details/120938688")]),t._v(" "),a("h4",{attrs:{id:"绝对值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绝对值"}},[t._v("#")]),t._v(" 绝对值")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ABS(数值字段) 绝对值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ABS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 输出: 字段是绝对值 没有负数 33")]),t._v("\n")])])]),a("h4",{attrs:{id:"余数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#余数"}},[t._v("#")]),t._v(" 余数")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- MOD(N,M) 或%:返回N被M除的余数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 输出余数 1")]),t._v("\n")])])]),a("h4",{attrs:{id:"不小于最小整数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不小于最小整数值"}},[t._v("#")]),t._v(" 不小于最小整数值")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- CEILING(X) 返回不小于X的最小整数值。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" CEILING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 输出余数 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" CEILING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 输出余数 -1")]),t._v("\n")])])]),a("h4",{attrs:{id:"四舍五入的整数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四舍五入的整数"}},[t._v("#")]),t._v(" 四舍五入的整数")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ROUND(X) :返回参数X的四舍五入的一个整数。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.58")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 输出余数 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.58")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 输出余数 -2")]),t._v("\n")])])]),a("h3",{attrs:{id:"字符串函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串函数"}},[t._v("#")]),t._v(" 字符串函数")]),t._v(" "),a("h4",{attrs:{id:"ascii代码值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ascii代码值"}},[t._v("#")]),t._v(" ASCII代码值")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ASCII(str):返回字符串str的最左面字符的ASCII代码值。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 如果str是空字符串，返回0。如果str是NULL，返回NULL。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 50")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 100")]),t._v("\n")])])]),a("h4",{attrs:{id:"合并多列为一列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并多列为一列"}},[t._v("#")]),t._v(" 合并多列为一列")]),t._v(" "),a("blockquote",[a("p",[t._v("CONCAT 语法")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 如果任何参数是NULL，返回NULL。可以有超过2个的参数。一个数字参数被变换为等价的字符串形式。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('-- CONCAT(列名1,"/",列名2,"/",列名3) 别名')]),t._v("\nCONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cname\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 先分组 在合并多列为一列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- GROUP_CONCAT(列名1,列名2) 别名")]),t._v("\nGROUP_CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cname\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 分组后多行列值合并一行 并进行倒序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 按 attendance_time 分组, 将每一组的 user_id 列每一行合并一行并倒序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n\tGROUP_CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" user_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" day_check_time\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("checking_detail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v("\n\tattendance_time\n")])])]),a("blockquote",[a("p",[t._v("案例")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cname\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" spu s\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inner")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" category c1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_id1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inner")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" category c2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_id2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inner")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" category c3 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_id3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("category_id\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" GROUP_CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("rbac_user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220809144852195.png",alt:"image-20220809144852195"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220819220210334.png",alt:"image-20220819220210334"}})]),t._v(" "),a("h4",{attrs:{id:"获取字符串长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取字符串长度"}},[t._v("#")]),t._v(" 获取字符串长度")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- LENGTH(str):返回字符串str的长度。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" LENGTH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("text")]),t._v("’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 4")]),t._v("\n")])])]),a("h4",{attrs:{id:"截取字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#截取字符串"}},[t._v("#")]),t._v(" 截取字符串")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回字符串str的最左面len个字符。\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘foobarbar’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" fooba\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RIGHT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回字符串str的最右面len个字符\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RIGHT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘foobarbar’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" rbar\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUBSTRING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("从字符串str的起始位置pos到最后 返回一个子串。\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUBSTRING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quadratically")]),t._v("’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" ratically\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TRIM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回字符串str，所有前缀或后缀被删除了\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TRIM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("’ bar '"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" bar\n            \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LTRIM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回删除了其前置空格字符的字符串str。\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LTRIM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("’ barbar’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RTRIM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回删除了其拖后空格字符的字符串str。\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RTRIM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘barbar ’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("REPLACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("from_str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("to_str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回字符串str，其字符串from_str的所有出现由字符串to_str代替\n            \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("REPEAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回由重复countTimes次的字符串str组成的一个字符串。如果count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("，返回一个空字符串。如果str或count是NULL，返回NULL。\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("REPEAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQL")]),t._v("’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLMySQLMySQL")]),t._v("\n            \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("REVERSE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回颠倒字符顺序的字符串str。\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("REVERSE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘abc’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" cba\n            \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("INSERT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("newstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("返回字符串str，在位置pos起始的子串且len个字符长的子串由字符串newstr代替。\nselect "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("INSERT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘whatareyou’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ‘is’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" whatisyou\n")])])]),a("h3",{attrs:{id:"判空列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判空列"}},[t._v("#")]),t._v(" 判空列")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- thirtysum 为null 则 值为0 反之还是原来的值 as: 别名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COALESCE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thirtysum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" thirtyDaysAmount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" stock_in_order s\n")])])]),a("h3",{attrs:{id:"双select查询组合成一表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双select查询组合成一表"}},[t._v("#")]),t._v(" 双select查询组合成一表")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("\n        u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" unitName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" unitId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" endAmount\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 将查询出来的归于一张表进行左连接 使用对应的字段对接")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" unit_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("amount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" thirtysum "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" stock_in_order \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" audit_status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" category "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" TIMESTAMPDIFF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DAY")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("busi_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" unit_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" unit_id\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unit_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unit_id\n")])])]),a("h3",{attrs:{id:"联合外全-查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合外全-查询"}},[t._v("#")]),t._v(" 联合外全 查询")]),t._v(" "),a("blockquote",[a("p",[t._v("Union | all  即 将多张表的数据一次性显示成一张表的数据 且列数一致")])]),t._v(" "),a("p",[t._v("防坑指南:")]),t._v(" "),a("ul",[a("li",[t._v("列数不一致 会报错")]),t._v(" "),a("li",[t._v("列的数据类型 不一致不会报错 但是会导致类型不明确或者转换字符串")]),t._v(" "),a("li",[t._v("Union 会将行数相同的数据合并一行 去重")]),t._v(" "),a("li",[t._v("Union all 则不会去重 显示所有数据")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Union 会将行数相同的数据合并一行 去重")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Union")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Union all 则不会去重 显示所有数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Union")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("all")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" b\n")])])]),a("h3",{attrs:{id:"条件判断后聚合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件判断后聚合"}},[t._v("#")]),t._v(" 条件判断后聚合")]),t._v(" "),a("blockquote",[a("p",[t._v("以同列值为分组合为一条时 会导致后面对应多条语句")]),t._v(" "),a("p",[t._v("使用  条件判断后聚合  创建新的列 值为; 经过 if 判断的聚合函数 的唯一值")])]),t._v(" "),a("p",[a("strong",[t._v("语法")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 语法一: ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 聚合函数(if(条件列名='值', 为true时的值, 为false时的值)) 列名的别名,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'语文'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 语文"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 语法二:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 聚合函数(case when 条件列名='值' then 为true时的值 else 为false时的值 end) 列名的别名,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'语文'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 语文"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 如果expression_1不为NULL，则IFNULL函数返回expression_1; 否则返回expression_2的结果。")]),t._v("\nIFNULL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("expression_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("案例")])]),t._v(" "),a("blockquote",[a("p",[t._v("解释: 如数学 --\x3e  件为真(数学) 则值为数学分数 在判断为假(语文-外语) 值为 0 最后将使用的值进行聚合为一个数值 然后再取列名")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" any_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stu_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stu_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'姓名'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" any_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gra_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'班级'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'语文'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sco_grade"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 语文"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'数学'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sco_grade "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 数学"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'外语'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sco_grade "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 外语\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" stu_student t\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" stu_score s "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sco_stuid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stu_id \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" stu_subject b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sco_subid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" stu_grade g "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gra_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stu_classid\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gra_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stu_name\n")])])]),a("h2",{attrs:{id:"mysql-技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-技巧"}},[t._v("#")]),t._v(" MySql 技巧")]),t._v(" "),a("h3",{attrs:{id:"时间字段自动添加-更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间字段自动添加-更新"}},[t._v("#")]),t._v(" 时间字段自动添加|更新")]),t._v(" "),a("p",[t._v("详见: "),a("a",{attrs:{href:"https://blog.csdn.net/qq_41942909/article/details/80749766",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySql数据库插入一条数据时，create_time字段自动添加为当前时间")])]),t._v(" "),a("blockquote",[a("p",[t._v("自动添加插入数据的时间")])]),t._v(" "),a("ol",[a("li",[t._v("设置字段类型为datetime。(不建议使用"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=timestamp&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("timestamp")]),t._v("类型)")]),t._v(" "),a("li",[t._v("默认值填写为   CURRENT_TIMESTAMP （需要自己手动填写，注意单词拼写正确）")]),t._v(" "),a("li",[t._v("这样就达成了我们的目的，插入一条数据的时候，create_time字段会自动添加内容为插入数据的时间")])]),t._v(" "),a("blockquote",[a("p",[t._v("自动添加修改数据的时间")])]),t._v(" "),a("ol",[a("li",[t._v("设置字段类型为datetime。(不建议使用"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=timestamp&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("timestamp")]),t._v("类型)")]),t._v(" "),a("li",[t._v("默认值填写为   CURRENT_TIMESTAMP （需要自己手动填写，注意单词拼写正确）")]),t._v(" "),a("li",[a("strong",[t._v("需要勾选默认值下方的 根据当前时间戳更新")]),t._v("，修改一条数据的时候，create_time字段会自动添加内容为修改数据的时间")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/nhifr8-0.png",alt:"image-20221007121329040"}})]),t._v(" "),a("h2",{attrs:{id:"mysql-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-原理"}},[t._v("#")]),t._v(" MySql 原理")]),t._v(" "),a("h3",{attrs:{id:"mysql-树原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-树原理"}},[t._v("#")]),t._v(" MySql 树原理")]),t._v(" "),a("blockquote",[a("p",[t._v("MySql 使用的树有: B+ 树 |  B 树 | Hash | 红黑树 | 二叉树  [InnoDB 使用 B+ 树]")])]),t._v(" "),a("h4",{attrs:{id:"二叉查找树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树"}},[t._v("#")]),t._v(" 二叉查找树")]),t._v(" "),a("p",[t._v("二叉树具有以下性质："),a("strong",[t._v("左子树的键值小于根的键值，右子树的键值大于根的键值。")])]),t._v(" "),a("h4",{attrs:{id:"平衡二叉树-avl-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树-avl-tree"}},[t._v("#")]),t._v(" 平衡二叉树（AVL Tree）")]),t._v(" "),a("p",[t._v("平衡二叉树（AVL树）"),a("strong",[t._v("是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树")]),t._v("。也就是说在符合二叉查找树的条件下，它还满足任何节点的两个子树的高度最大差为1。")]),t._v(" "),a("blockquote",[a("p",[t._v("AVL树失去平衡之后，可以通过旋转使其恢复平衡。下面分别介绍四种失去平衡的情况下对应的旋转方法。")])]),t._v(" "),a("p",[t._v("这四种失去平衡的姿态都有各自的定义：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- LL：LeftLeft，也称“左左”。插入或删除一个节点后，根节点的左孩子（Left Child）的左孩子（Left Child）还有非空节点，导致根节点的左子树高度比右子树高度高2，AVL树失去平衡。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- RR：RightRight，也称“右右”。插入或删除一个节点后，根节点的右孩子（Right Child）的右孩子（Right Child）还有非空节点，导致根节点的右子树高度比左子树高度高2，AVL树失去平衡。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- LR：LeftRight，也称“左右”。插入或删除一个节点后，根节点的左孩子（Left Child）的右孩子（Right Child）还有非空节点，导致根节点的左子树高度比右子树高度高2，AVL树失去平衡。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- RL：RightLeft，也称“右左”。插入或删除一个节点后，根节点的右孩子（Right Child）的左孩子（Left Child）还有非空节点，导致根节点的右子树高度比左子树高度高2，AVL树失去平衡。")]),t._v("\n")])])]),a("p",[t._v("LL===>右单旋")]),t._v(" "),a("p",[t._v("RR===>左单旋")]),t._v(" "),a("p",[t._v("LR===>先左旋，后右旋")]),t._v(" "),a("p",[t._v("RL===>先右旋，后左旋")]),t._v(" "),a("h4",{attrs:{id:"b-tree-平衡多路查找树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-tree-平衡多路查找树"}},[t._v("#")]),t._v(" B-Tree（平衡多路查找树）")]),t._v(" "),a("p",[t._v("B-Tree结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述B-Tree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data为一行记录中除主键外的数据。对于不同的记录，key值互不相同。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/2019090109300123.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("h4",{attrs:{id:"b-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-tree"}},[t._v("#")]),t._v(" B+Tree")]),t._v(" "),a("p",[t._v("B+Tree是在B-Tree基础上的一种优化，InnoDB存储引擎就是用B+Tree实现其索引结构。")]),t._v(" "),a("p",[t._v("B+树的特性：")]),t._v(" "),a("ul",[a("li",[t._v("所有的"),a("strong",[t._v("叶子结点中包含了全部关键字的信息")]),t._v("，"),a("strong",[t._v("非叶子节点只存储键值信息")]),t._v("，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接，所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B树的非终节点也包含需要查找的有效信息)")]),t._v(" "),a("li",[t._v("所有叶子节点之间都有一个链指针。")]),t._v(" "),a("li",[t._v("数据记录都存放在叶子节点中。")])]),t._v(" "),a("p",[t._v("由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储3个键值及指针信息，则变成B+Tree后其结构如下图所示：\n"),a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/20190901093019761.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 数据库中的B+Tree索引可以分为**聚集索引**（clustered index）和辅助索引（secondary index）。上面的B+Tree示例图在数据库中的实现即为聚集索引，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 聚集索引的B+Tree中的叶子节点存放的是整张表的行记录数据。辅助索引与聚集索引的区别在于辅助索引的叶子节点并不包含行记录的全部数据，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据")]),t._v("\n")])])]),a("h3",{attrs:{id:"表-设计的三范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表-设计的三范式"}},[t._v("#")]),t._v(" 表 设计的三范式")]),t._v(" "),a("blockquote",[a("p",[t._v("第一范式: 原子性")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("表的每一列必须为 原子性 不可在分隔")])]),t._v(" "),a("li",[a("p",[t._v("如果该列可在分割 则必须分开为多列")])])]),t._v(" "),a("blockquote",[a("p",[t._v("第二范式: 字段与主键的完全完全依赖")])]),t._v(" "),a("ul",[a("li",[t._v("表的其他列 必须和主键ID 完全依赖")]),t._v(" "),a("li",[t._v("一张表不能出现 其他列 和 多个列或者主键 部分依赖 直白点就是 一张表 根据id查询 也可以 根据其他列查询到 (该列和主键一样唯一值)")]),t._v(" "),a("li",[t._v("如果出现 部分依赖 则必须拆分表 为多个对应的表")])]),t._v(" "),a("blockquote",[a("p",[t._v("第三范式: 不能有传递依赖")])]),t._v(" "),a("ul",[a("li",[t._v("列A 依赖于 列B | 列B 依赖于 列C")]),t._v(" "),a("li",[t._v("如果出现 传递依赖  显得列A多余 则必须拆分表 为多个对应的表")])]),t._v(" "),a("h3",{attrs:{id:"mysql-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务"}},[t._v("#")]),t._v(" MySql 事务")]),t._v(" "),a("p",[t._v("事务是一系列的数据库操作，是数据库应用的基本单位。")]),t._v(" "),a("blockquote",[a("p",[t._v("MySQL 中只有 InnoDB 引擎支持事务，它的四个特性:")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原子性（Atomic），要么全部执行，要么全部不执行；事务的原子性是通过  "),a("strong",[t._v("undolog 回滚日志")]),t._v("  来实现的，记录更新的相反操作")])]),t._v(" "),a("li",[a("p",[t._v("一致性（Consistency），事务的执行使得数据库从一种正确状态转化为另一种正确状态；通过原子性，持久性，隔离性来实现的")])]),t._v(" "),a("li",[a("p",[t._v("隔离性（Isolation），在事务正确提交之前，不允许把该事务对数据的任何改变提供给其他事务；通过读写锁+MVCC来实现的")])]),t._v(" "),a("li",[a("p",[t._v("持久性（Durability），事务提交后，其结果永久保存在数据库中。通过  "),a("strong",[t._v("redo log 日志")]),t._v("  来实现的")])])]),t._v(" "),a("blockquote",[a("p",[t._v("实现原理")])]),t._v(" "),a("p",[a("strong",[t._v("原子性原理：")])]),t._v(" "),a("p",[t._v("从8.0.3开始，默认undo tablespace的个数从0调整为2 也就是在8.0版本中，独立undo tablespace被默认打开")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("通过undolog回滚日志来实现的，undo log是一种用于撤销回退的日志， 可以理解为当delete一条记录时， undo log中会记录一条对应的insert记录；当insert一条记录时， undo log中会一条对应的delete记录；当update一条记录时， undo log中记录一条对应相反的update记录\n")])])]),a("p",[a("strong",[t._v("持久性原理：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Redo Log(重做日志)记录的是新数据的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化到磁盘。当系统崩溃时，虽然数据没有持久化，但是Redo Log经持久化。系统可以根据Redo Log的内容刷新到磁盘\n")])])]),a("h3",{attrs:{id:"mysql-事务隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务隔离级别"}},[t._v("#")]),t._v(" MySql 事务隔离级别")]),t._v(" "),a("h4",{attrs:{id:"开启和关闭事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启和关闭事务"}},[t._v("#")]),t._v(" 开启和关闭事务")]),t._v(" "),a("blockquote",[a("p",[t._v("默认情况下，单独的一条sql就是一个事务，所谓默认情况指的是你没有手动去开启事务")])]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("## 查看自动提交状态\nselect @@autocommit;\n## 值为0： 关闭自动提交   值为1：开启自动提交\nset autocommit = 0|1; \n关闭自动提交后，从下一条sql语句开始则开启新事务，需要使用commit或rollback语句结束该事务\n")])])]),a("h4",{attrs:{id:"隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别"}},[t._v("#")]),t._v(" 隔离级别")]),t._v(" "),a("p",[t._v("MySQL是一个服务器／客户端架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称之为一个会话（Session）")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("我们可以同时在不同的会话里输入各种语句，这些语句可以作为事务的一部分进行处理。不同的会话可以同时发送请求，也就是说服务器可能同时在处理多个事务，这样子就会导致不同的事务可能同时访问到相同的记录。我们前边说过事务有一个特性称之为隔离性，理论上在某个事务对某个数据进行访问时，其他事务应该进行排队，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样子的话对性能影响太大，所以设计数据库的大叔提出了各种隔离级别，来最大限度的提升系统并发处理事务的能力，但是这也是以牺牲一定的隔离性来达到的\n")])])]),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("## 查看当前数据库的隔离级别\nmysql> SELECT @@tx_isolation    ## mysql默认是可重复读\n## 修改当前数据库的隔离级别\nmysql> set global transaction isolation level read uncommitted;   ## 这是设置的读未提交级别\n\n注意：设置后要重启客户端\n")])])]),a("blockquote",[a("p",[t._v("读未提交   READ UNCOMMITTED")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 如果一个事务读到了另一个未提交事务修改过的数据，那么这种`隔离级别`就称之为`未提交读`（英文名：`READ UNCOMMITTED`），")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 事务A对数据做的修改，即使没有提交，对于事务B来说也是可见的，这种问题叫脏读，这是隔离程度较低的一种隔离级别，在实际运用中会引起很多问题，因此一般不常用，它不能解决脏读，可重复读，幻读的问题")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("读已提交   READ COMMITTED")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 如果一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值，那么这种`隔离级别`就称之为`已提交读`（英文名：`READ COMMITTED`），")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在此隔离级别下，不会出现脏读的问题。事务A对数据做的修改，提交之后会对事务B可见。**它能解决脏读问题，不能解决可重复读和幻读问题**")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("可重复读   REPEATABLE READ")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在该业务场景中，事务B只能读到事务A已经提交的事务修改过的数据，但是第一次读过某条记录后，即使其他事务修改了该记录的值并且提交，该事务之后再读该条记录时，读到的仍是第一次读到的值，而不是每次都读到不同的数据。那么这种隔离级别就称之为可重复读（英文名：REPEATABLE READ） ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 可重复读解决了脏读和不可重复读的问题，但是不能解决幻读问题")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("串行化    SERIALIZABLE")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 以上3种隔离级别都允许对同一条记录进行`读-读`、`读-写`、`写-读`的并发操作，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 如果我们不允许`读-写`、`写-读`的并发操作，可以使用`SERIALIZABLE`隔离级别，即事务之间的执行是串行的，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 当一个事务在操作的时候，另外的事务就只能等，必须等到该事务提交或者回滚，其它的事务才能继续操作，serializable隔离级别的多个事务不可以同时对同一张表修改！")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 串行化，能解决脏读，可重复读，幻读问题，但是效率非常慢，因为事务执行是串行执行的。")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("幻读")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 事务B按照一定条件进行数据读取， 期间事务A插入了相同搜索条件的新数据，事务A查询的时候，还是看不到B插入的新数据，但是其实数据库是有的，即使A事务提交了，B也发现不了，这个时候B也插入一条相同的数据，就会报错。这种情况称为幻读")]),t._v("\n")])])]),a("h3",{attrs:{id:"mysql-锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-锁"}},[t._v("#")]),t._v(" MySql 锁")]),t._v(" "),a("h4",{attrs:{id:"加锁的目的是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加锁的目的是什么"}},[t._v("#")]),t._v(" 加锁的目的是什么")]),t._v(" "),a("blockquote",[a("p",[t._v("数据加锁是为了解决事务的隔离性问题，让事务之间相互不影响，每个事务进行操作的时候都必须先对数据加上一把锁，防止其他事务同时操作数据。")])]),t._v(" "),a("h4",{attrs:{id:"锁是基于什么实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁是基于什么实现的"}},[t._v("#")]),t._v(" 锁是基于什么实现的")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数据库里面的锁是基于索引实现的，在Innodb中我们的锁都是作用在索引上面的，")])]),t._v(" "),a("li",[a("p",[t._v("当我们的SQL命中索引时，那么锁住的就是命中条件内的索引节点(行锁)，")])]),t._v(" "),a("li",[a("p",[t._v("如果没有命中索引的话，那我们锁的就是整个索引树（表锁），")])]),t._v(" "),a("li",[a("p",[t._v("完全取决于你的条件是否有命中到对应的索引节点。")])])]),t._v(" "),a("h4",{attrs:{id:"锁的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁的分类"}},[t._v("#")]),t._v(" 锁的分类")]),t._v(" "),a("blockquote",[a("p",[t._v('数据库里有的锁有很多种，为了方面理解，所以我根据其相关性"人为"的对锁进行了一个分类，分别如下')])]),t._v(" "),a("ul",[a("li",[t._v("基于锁的属性分类：共享锁、排他锁。")]),t._v(" "),a("li",[t._v("基于锁的粒度分类：表锁、行锁、记录锁、间隙锁、临键锁。")]),t._v(" "),a("li",[t._v("基于锁的状态分类：意向共享锁、意向排它锁")])]),t._v(" "),a("h4",{attrs:{id:"属性锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性锁"}},[t._v("#")]),t._v(" 属性锁")]),t._v(" "),a("h5",{attrs:{id:"共享锁-share-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享锁-share-lock"}},[t._v("#")]),t._v(" 共享锁（Share Lock）")]),t._v(" "),a("ul",[a("li",[t._v("表级共享锁又称读锁，简称S锁，")])]),t._v(" "),a("ul",[a("li",[t._v("在一个事务访问某张表的时候，允许另一个事务对同一张表进行"),a("font",{attrs:{color:"red"}},[t._v("查询操作")]),t._v("。")],1),t._v(" "),a("li",[t._v("其他的操作(增删改 排它锁)则进行等待阻塞 当查询执行完在进行执行")])]),t._v(" "),a("ul",[a("li",[t._v("加锁操作一定要在事务上进行")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("对读取的记录加"),a("font",{attrs:{color:"red"}},[t._v("S锁")])],1)])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT .... LOCK IN SHARE MODE;\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220530152035051.png",alt:"image-20220530152035051"}})]),t._v(" "),a("h5",{attrs:{id:"排它锁-exclusive-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排它锁-exclusive-lock"}},[t._v("#")]),t._v(" 排它锁（Exclusive Lock）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("行级排它锁又称为写锁，简称X锁，")])]),t._v(" "),a("li",[a("p",[t._v("在一个事务修改（insert/update/delete）某张表的某条数据时，不允许另一个事务修改"),a("font",{attrs:{color:"red"}},[t._v("同一条数据")])],1)]),t._v(" "),a("li",[a("p",[t._v("其他的事务 [共享锁 排它锁] 都必须等待阻塞")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("对读取的记录加"),a("font",{attrs:{color:"red"}},[t._v("X锁")])],1)])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT .... FOR UPDATE;\n")])])]),a("p",[a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/image-20220530171315783.png",alt:"image-20220530171315783"}})]),t._v(" "),a("h4",{attrs:{id:"粒度锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#粒度锁"}},[t._v("#")]),t._v(" 粒度锁")]),t._v(" "),a("h5",{attrs:{id:"表锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表锁"}},[t._v("#")]),t._v(" 表锁")]),t._v(" "),a("blockquote",[a("p",[t._v("特点： 粒度大，"),a("strong",[t._v("偏向myisam引擎")]),t._v("，无死锁，并发度最低")])]),t._v(" "),a("ul",[a("li",[t._v("表锁是指上锁的时候锁住的是整个表，")]),t._v(" "),a("li",[t._v("当下一个事务访问该表的时候，必须等前一个事务释放了锁才能进行对表进行访问；")])]),t._v(" "),a("h5",{attrs:{id:"行锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行锁"}},[t._v("#")]),t._v(" 行锁")]),t._v(" "),a("blockquote",[a("p",[t._v("特点：粒度小，加锁比表锁麻烦，不容易冲突，相比表锁支持的并发要高；")])]),t._v(" "),a("ul",[a("li",[t._v("行锁是对所有行级别锁的一个统称，比如下面说的记录锁、间隙锁、临键锁都是属于行锁，")]),t._v(" "),a("li",[t._v("行锁是指加锁的时候锁住的是表的某一行或多行记录，多个事务访问同一张表时，只有被锁住的记录不能访问，其他的记录可正常访问；")])]),t._v(" "),a("p",[a("strong",[t._v("注意点:")]),t._v("  索引失效使行锁变表锁")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 1. 没有命中索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 2. 条件的字段没有建立索引 或者 索引失效")]),t._v("\n")])])]),a("h4",{attrs:{id:"行锁-细分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行锁-细分"}},[t._v("#")]),t._v(" 行锁 细分")]),t._v(" "),a("h5",{attrs:{id:"记录锁-record-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#记录锁-record-lock"}},[t._v("#")]),t._v(" 记录锁（Record Lock）")]),t._v(" "),a("blockquote",[a("p",[t._v("记录锁的范围只是表中的某一条记录，记录锁是说事务在加锁后锁住的只是表的某一条记录")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("触发条件：精准条件命中，并且命中索引\n\n记录锁的作用：加了记录锁之后数据可以避免数据在查询的时候被修改的重复读问题，也避免了在修改的事务未提交前被其他事务读取的脏读问题。\n")])])]),a("h5",{attrs:{id:"间隙锁-gap-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#间隙锁-gap-lock"}},[t._v("#")]),t._v(" 间隙锁（Gap Lock）")]),t._v(" "),a("p",[t._v("间隙锁是在事务加锁后其锁住的是表记录的某一个区间，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现幻读现象，当表的相邻ID之间出现空隙则会形成一个区间，即锁定的间隙为（A，B] 左开右闭")]),t._v(" "),a("p",[t._v("**触发条件：**范围查询，查询条件必须命中索引、间隙锁只会出现在REPEATABLE_READ（可重复读)的事务级别中")]),t._v(" "),a("h5",{attrs:{id:"临键锁-next-key-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临键锁-next-key-lock"}},[t._v("#")]),t._v(" 临键锁(Next-Key Lock)")]),t._v(" "),a("p",[t._v("它是INNODB的行锁默认算法，总结来说它就是记录锁和间隙锁的组合，"),a("strong",[t._v("临键锁会把查询出来的记录锁住，同时也会把该范围查询内的所有间隙空间也会锁住，再之它会把相邻的下一个区间也会锁住")])]),t._v(" "),a("p",[t._v("**临键锁的作用：**结合记录锁和间隙锁的特性，临键锁避免了在范围查询时出现脏读、重复读、幻读问题。")]),t._v(" "),a("h3",{attrs:{id:"mysql-重要日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-重要日志"}},[t._v("#")]),t._v(" MySQL 重要日志")]),t._v(" "),a("h4",{attrs:{id:"错误日志-log-error"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误日志-log-error"}},[t._v("#")]),t._v(" 错误日志  log_error")]),t._v(" "),a("blockquote",[a("p",[t._v("用来记录 MySQL 服务器运行过程中的错误信息，")])]),t._v(" "),a("p",[t._v("比如，无法加载 MySQL 数据库的数据文件，或权限不正确等都会被记录在此，还有主从复制环境下，从服务器进程的信息也会被记录进错误日志。默认情况下，错误日志是开启的，且无法被禁止。")]),t._v(" "),a("p",[t._v("查看错误日志文件")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SHOW VARIABLES LIKE 'log_error';\n##linux默认位置###     /var/log/mysqld.log \n##window默认位置###    C:\\dev\\mysql\\mysql-8.0.19-winx64\\data\\QH-20210227YZPF.err\n")])])]),a("p",[t._v("将 log_error 选项加入到 MySQL 配置文件的 [mysqld] 组中，形式如下：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mysqld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nlog-error"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("dir/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###重启 MySQL 服务后，参数开始生效，可以在指定路径下看到 filename.err 的文件")]),t._v("\n")])])]),a("h4",{attrs:{id:"通用日志-general-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用日志-general-log"}},[t._v("#")]),t._v(" 通用日志 general log")]),t._v(" "),a("p",[t._v("查询（通用）日志 ：查询日志在 MySQL 中被称为 general log（通用日志），查询日志里的内容不要被“查询日志”误导，认为里面只存储 select 语句，其实不然，查询日志里面记录了数据库执行的所有命令，不管语句是否正确，如增删改查语句都会被记录，在并发操作非常多的场景下，查询信息会非常多，那么如果都记录下来会导致 IO 非常大，影响 MySQL 性能。因此如果不是在调试环境下，是不建议开启查询日志功能的。 查询日志的开启有助于帮助我们分析哪些语句执行密集，执行密集的 select 语句对应的数据是否能够被缓存，同时也可以帮助我们分析问题，因此，可以根据自己的实际情况来决定是否开启查询日志。 查询日志模式是关闭的，可以通过以下命令开启查询日志。")]),t._v(" "),a("p",[t._v("查看通用日志的位置")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SHOW VARIABLES LIKE '%general%';\n##linux默认位置###     /var/lib/mysql/localhost.log                                 value值是off\n##window默认位置###    C:\\dev\\mysql\\mysql-8.0.19-winx64\\data\\QH-20210227YZPF.log    value值是off\n")])])]),a("p",[t._v("默认通用日志是关闭的，可以开启")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("set global general_log=1        ##关闭通用日志 set global general_log=0\n##重启mysql服务  service mysqld restart\n")])])]),a("h4",{attrs:{id:"慢日志-slow-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#慢日志-slow-log"}},[t._v("#")]),t._v(" 慢日志 slow log")]),t._v(" "),a("p",[t._v("慢日志 slow log：慢查询会导致 CPU、内存消耗过高，当数据库遇到性能瓶颈时，大部分时间都是由于慢查询导致的，慢查询导致IO阻塞，开启慢查询日志，可以让 MySQL 记录下查询超过指定时间的语句，之后运维人员通过定位分析，能够很好的优化数据库性能。默认情况下，慢查询日志是不开启的，只有手动开启了，慢查询才会被记录到慢查询日志中。")]),t._v(" "),a("p",[t._v("查看慢日志的位置")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> SHOW VARIABLES LIKE 'slow_query%';\n##linux默认位置###     /var/lib/mysql/localhost-slow.log                                value值是off\n##window默认位置###   C:\\dev\\mysql\\mysql-8.0.19-winx64\\data\\QH-20210227YZPF-slow.log    value值是off\n\n##查询超过多少秒才记录\nmysql> SHOW VARIABLES LIKE 'long_query_time';   ###时间以秒为单位\n")])])]),a("p",[t._v("启动和设置慢查询日志")]),t._v(" "),a("p",[t._v("可以通过 log-slow-queries 选项开启慢查询日志。通过 long_query_time 选项来设置时间值，时间以秒为单位")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vim /etc/my.cnf\n[mysqld]\nlog-slow-queries=/tmp/mysql-slow.log\nlong_query_time=n\n")])])]),a("p",[t._v("还可以通过以下命令启动慢查询日志、设置指定时间：")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SET GLOBAL slow_query_log=ON/OFF;\n#SET GLOBAL slow_query_log_file = /var/log/slow-query.log ## 慢查询日志存放目录\nSET GLOBAL long_query_time=5;  #设置5秒\n")])])]),a("p",[t._v("测试：")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select sleep(10);  #查询10秒\n")])])]),a("h4",{attrs:{id:"回滚日志-undo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回滚日志-undo-log"}},[t._v("#")]),t._v(" 回滚日志 undo log")]),t._v(" "),a("blockquote",[a("p",[t._v("事务原子性（Atomic），要么全部执行，要么全部不执行；事务的原子性是通过  "),a("strong",[t._v("undolog 回滚日志")]),t._v("  来实现的，记录更新的相反操作")])]),t._v(" "),a("p",[t._v("undo log（回滚日志） ：用于存储日志被修改前的值，从而保证如果修改出现异常，可以使用 undo log 日志来实现回滚操作。 undo log 和 redo log 记录物理日志不一样，它是逻辑日志，可以认为当 delete 一条记录时，undo log 中会记录一条对应的 insert 记录，反之亦然，当 update 一条记录时，它记录一条对应相反的 update 记录，当执行 rollback 时，就可以从 undo log 中的逻辑记录读取到相应的内容并进行回滚。")]),t._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> show variables like '%innodb_undo%';\n")])])]),a("h4",{attrs:{id:"重做日志-redo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重做日志-redo-log"}},[t._v("#")]),t._v(" 重做日志 redo log")]),t._v(" "),a("blockquote",[a("p",[t._v("事务的持久性（Durability），事务提交后，其结果永久保存在数据库中。通过  "),a("strong",[t._v("redo log 日志")]),t._v("  来实现的")])]),t._v(" "),a("p",[t._v("redo log（重做日志） ：在事务频繁提交中，为了避免每一次提交都要往磁盘写， 造成IO性能的问题，MySQL 采用了这样一种缓存机制，先将数据写入内存中，再批量把内存中的数据统一刷回磁盘。为了避免将数据刷回磁盘过程中，因为掉电或系统故障带来的数据丢失问题，InnoDB 采用 redo log 来解决此问题。")]),t._v(" "),a("h4",{attrs:{id:"二进制日志-bin-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制日志-bin-log"}},[t._v("#")]),t._v(" 二进制日志 bin log")]),t._v(" "),a("p",[t._v("bin log（二进制日志） ：是一个二进制文件，主要记录所有数据库表结构变更，比如，CREATE、ALTER TABLE 等，以及表数据修改，比如，INSERT、UPDATE、DELETE 的所有操作，bin log 中记录了对 MySQL 数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其他额外信息，但是它不记录 SELECT、SHOW 等那些不修改数据的 SQL 语句。")]),t._v(" "),a("p",[t._v("binlog 的作用如下： •恢复（recovery）：某些数据的恢复需要二进制日志。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("比如，在一个数据库全备文件恢复后，用户可以通过二进制日志进行 point-in-time 的恢复； \n复制（replication）：其原理与恢复类似，通过复制和执行二进制日志使一台远程的 MySQL 数据库（一般称为 slave 或者 standby）与一台 MySQL 数据库（一般称为 master 或者 primary）进行实时同步； binlog 默认是关闭状态，可以在 MySQL 配置文件（my.cnf）中通过配置参数 \n")])])]),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("show variables like '%log_bin%';  ##查看binlog日志情况\n")])])]),a("p",[t._v("修改mysql的etc下的my.cnf文件")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mysqld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("log_bin")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ON      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#打开binlog日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##重启服务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" mysqld restart\n")])])]),a("blockquote",[a("p",[t._v("重启mysql服务之后，在/var/lib/mysql/目录下会看到， ON.000001文件，这是binlog日志的基本文件名，ON.index指定的是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录")])]),t._v(" "),a("h3",{attrs:{id:"mvcc实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc实现原理"}},[t._v("#")]),t._v(" MVCC实现原理")]),t._v(" "),a("blockquote",[a("p",[t._v("MVCC查询的工作流程")])]),t._v(" "),a("h4",{attrs:{id:"查询主键索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询主键索引"}},[t._v("#")]),t._v(" 查询主键索引")]),t._v(" "),a("ul",[a("li",[t._v("生成Read View读视图")]),t._v(" "),a("li",[t._v("通过主键查找记录，根据记录里的DB_TRX_ID与Read View读视图进行可见性判断")]),t._v(" "),a("li",[t._v("配合DB_ROLL_PTR回滚指针和undo log来找到当前事务可见的数据记录")])]),t._v(" "),a("h4",{attrs:{id:"查询二级索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询二级索引"}},[t._v("#")]),t._v(" 查询二级索引")]),t._v(" "),a("ul",[a("li",[t._v("生成Read View读视图")]),t._v(" "),a("li",[t._v("比较读视图的up_limit_id与MAX_TRX_ID大小")]),t._v(" "),a("li",[t._v("如果MAX_TRX_ID "),a("strong",[t._v("小于")]),t._v(" 本次Read View的up_limit_id，则全部可见，过滤记录中的有效记录")]),t._v(" "),a("li",[t._v("否则，无法通过二级索引判断可见性，需要一次遍历每条记录，反查到聚簇索引记录，通过聚簇索引记录来判断可见性")])]),t._v(" "),a("h4",{attrs:{id:"mvcc与隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc与隔离级别"}},[t._v("#")]),t._v(" MVCC与隔离级别")]),t._v(" "),a("p",[t._v("MVCC 只在 "),a("strong",[t._v("Read Commited 和 Repeatable Read")]),t._v(" 两种隔离级别下工作。")]),t._v(" "),a("p",[t._v("1.在RC隔离级别下，是"),a("strong",[t._v("每个快照读都会生成并获取最新的Read View")]),t._v("；这就是我们在RC级别下的事务中可以看到别的事务提交的更新的原因")]),t._v(" "),a("p",[t._v("2.在RR隔离级别下，则是同一个事务中的第一个快照读才会创建Read View, 之后的快照读获取的都是同一个Read View。最后返回符合规")]),t._v(" "),a("p",[t._v("总之，InnoDB 实现MVCC，是通过"),a("code",[t._v("Read View+ Undo Log")]),t._v(" 实现的，Undo Log 保存了历史快照，Read View可见性规则帮助判断当前版本的数据是否可见。")]),t._v(" "),a("h2",{attrs:{id:"mysql-补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-补充"}},[t._v("#")]),t._v(" MySql 补充")]),t._v(" "),a("p",[t._v("参考: https://blog.csdn.net/luostudent/article/details/127011118")]),t._v(" "),a("h3",{attrs:{id:"数据表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据表"}},[t._v("#")]),t._v(" 数据表:")]),t._v(" "),a("blockquote",[a("p",[t._v("表 | 必备字段:")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'主键id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("creator_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" 表必须包"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'创建人id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("modifier_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'修改人id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("create_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("datetime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'创建时间'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("modify_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("datetime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'更新时间'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("is_delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tinyint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'删除标识：0未删除1已删除'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("说明：")])]),t._v(" "),a("ul",[a("li",[t._v("主键id：独立的自增的bigint，与业务无关")]),t._v(" "),a("li",[t._v("创建人id：记录创建人")]),t._v(" "),a("li",[t._v("修改人id：记录修改人")]),t._v(" "),a("li",[t._v("创建时间：程序维护、不修改，建索引")]),t._v(" "),a("li",[t._v("更新时间：数据维护 删除标识：软删除")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意事项:")])]),t._v(" "),a("p",[a("strong",[t._v("1.主键使用自增 int/bigint")])]),t._v(" "),a("p",[t._v("主键id：独立的自增的bigint，与业务无关，禁止修改")]),t._v(" "),a("ul",[a("li",[t._v("避免插入数据造成数据分页")]),t._v(" "),a("li",[t._v("提高二级索引的性能，二级索引包含主键")]),t._v(" "),a("li",[t._v("大表一定要bigint，防止int不够用（大约21亿左右），溢出后会导致报错。")])]),t._v(" "),a("p",[a("strong",[t._v("2.禁止使用 default NULL")])]),t._v(" "),a("p",[t._v("所有字段均定义为NOT NULL：")]),t._v(" "),a("ul",[a("li",[t._v("字符为default ‘’")]),t._v(" "),a("li",[t._v("数值为default 0")]),t._v(" "),a("li",[t._v("时间为default 0000-00-00 00:00:00")])]),t._v(" "),a("h3",{attrs:{id:"sql规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql规范"}},[t._v("#")]),t._v(" SQL规范：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("访问量很大的SQL不要在数据库里做排序\n\n禁止在DB里排序，请在web server上排序（对并发量特别大的SQL），web server有上百台，而db仅仅只有个位数的数量，排序都在db，会把db压垮。\n\n禁止在where子句中对字段施加函数，如to_date(add_time)>xxxxx, 应改为: add_time >= \n\nunix_timestamp(date_add(str_to_date('20220227','%Y%m%d'),interval - 29 day))\n\n禁止使用%做前缀模糊查询，例如LIKE “%weibo”，无法使用索引。\n\n禁止使用select *，兼容性差，使用更多的网络流量，不能使用覆盖索引，必须回表\n\n禁止3个以上的表join，join的字段数据类型必须绝对一致\n\nin列表元素不能超过1000个\n")])])]),a("h3",{attrs:{id:"避坑指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避坑指南"}},[t._v("#")]),t._v(" 避坑指南:")]),t._v(" "),a("h4",{attrs:{id:"left-join-增多数据条数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#left-join-增多数据条数"}},[t._v("#")]),t._v(" LEFT JOIN 增多数据条数")]),t._v(" "),a("blockquote",[a("p",[t._v("问题的产生: 左连接即使已左表为主,但是右表对应的关系存在重复数据则会产生多余的数据")])]),t._v(" "),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" "),a("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/fbmd75-0.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("解决方案")])]),t._v(" "),a("p",[t._v("参考: https://blog.csdn.net/lxy6904/article/details/114437506")])])}),[],!1,null,null,null);s.default=n.exports}}]);