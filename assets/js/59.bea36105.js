(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{535:function(t,a,s){"use strict";s.r(a);var n=s(65),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"ribbon-负载均衡-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ribbon-负载均衡-组件"}},[t._v("#")]),t._v(" Ribbon  负载均衡 组件")]),t._v(" "),s("p",[s("strong",[t._v("它是一个负载均衡组件")]),t._v("，在刚才的案例中，我们启动了一个woniu-service-provider，然后通过DiscoveryClient来获取服务实例信息，然后获取ip和端口来访问。")]),t._v(" "),s("p",[t._v("但是实际环境中，我们往往会开启很多个woniu-service-provider的集群。此时我们获取的服务列表中就会有多个，到底该访问哪一个呢？")]),t._v(" "),s("p",[t._v("一般这种情况下我们就需要编写负载均衡算法，在多个实例列表中进行选择。\n不过Eureka中已经帮我们集成了负载均衡组件：Ribbon，简单修改代码即可使用。")]),t._v(" "),s("p",[t._v("什么是Ribbon：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/1525619257397.png",alt:"1525619257397"}})]),t._v(" "),s("p",[t._v("在你没有意识到 Ribbon 存在的时候，Ribbon 就已经可以在你的项目中（配合 RestTemplate）起作用了。为你的 RestTemplate 的 @Bean 加上 "),s("strong",[t._v("@LoadBalanced")]),t._v(" 注解：\n@LoadBalanced 注解背后就是 Spring AOP 动态代理的思想。")]),t._v(" "),s("h2",{attrs:{id:"开启负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开启负载均衡"}},[t._v("#")]),t._v(" 开启负载均衡")]),t._v(" "),s("ul",[s("li",[t._v("调用方")])]),t._v(" "),s("p",[t._v("因为Eureka中已经集成了Ribbon，所以我们无需引入新的依赖，直接修改代码。\nwoniu-service-consumer的引导类，在RestTemplate的配置方法上添加"),s("code",[t._v("@LoadBalanced")]),t._v("注解")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 负载均衡 不添加这个注解，不能直接用服务名访问")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("restTemplate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("在表现层可以直接使用 服务名 调用")])]),t._v(" "),s("ul",[s("li",[t._v("注意: 服务名 不能 为 '  _ '  下划线 否则会出问题 中划线则没问题")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/porttest"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("porttest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// String url = "http://服务名/financing/getPort";')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://Moduleone/financing/getPort"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" forObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" restTemplate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getForObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" forObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"负载均衡策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡策略"}},[t._v("#")]),t._v(" 负载均衡策略")]),t._v(" "),s("p",[t._v("Ribbon默认的负载均衡策略是简单的轮询，我们可以测试一下：")]),t._v(" "),s("p",[t._v("编写测试类，在刚才的源码中我们看到拦截中是使用RibbonLoadBalanceClient来进行负载均衡的，其中有一个choose方法，找到choose方法的接口方法，是这样介绍的：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://apaiimages.oss-cn-guangzhou.aliyuncs.com/MD/1525622320277-1658206507070.png",alt:"1525622320277"}})]),t._v(" "),s("p",[t._v("SpringBoot也帮我们提供了修改负载均衡规则的配置入口，在woniu-service-consumer的application.yml中添加如下配置：")]),t._v(" "),s("p",[s("strong",[t._v("调用方添加 负载均衡 的配置")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("consumer\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10086/eureka\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-provider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 冒号左侧为: 服务名 注意大小写")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ribbon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 负载均衡策略: 随机策略 可进行设置")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("NFLoadBalancerRuleClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" com.netflix.loadbalancer.RandomRule\n")])])]),s("p",[t._v("格式是："),s("code",[t._v("{服务名称}.ribbon.NFLoadBalancerRuleClassName")]),t._v("，值就是IRule的实现类。")]),t._v(" "),s("h2",{attrs:{id:"负载均衡-内置策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡-内置策略"}},[t._v("#")]),t._v(" 负载均衡 内置策略")]),t._v(" "),s("p",[t._v("Ribbon 内置了 8 种负载均衡策略（其实是 7 种），它们都直接或间接实现了 "),s("strong",[t._v("IRule")]),t._v(" 接口：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("RandomRule\t随机策略\t随机选择 Server")])]),t._v(" "),s("li",[s("p",[t._v("RoundRobinRule\t轮询策略（默认策略）\t按顺序循环选择 Server")])]),t._v(" "),s("li",[s("p",[t._v("RetryRule\t重试策略\t在一个配置时间段内当选择 Server 不成功，则一直尝试选择一个可用的 Server")])]),t._v(" "),s("li",[s("p",[t._v("BestAvailableRule\t这种策略下，Ribbon 会观测、统计目标服务的各个实例的运行状况、并发量。")]),t._v(" "),s("p",[t._v("当再次发起对目标服务的访问时，Ribbon 会先过滤掉因为多次访问故障而被标记为 Error 的 实例。然后选择一个并发量（ActiveRequestCount）最小的实例发起访问。俗话说就是：先去掉不能干活的，然后在能干活的里面找一个最闲的。")])]),t._v(" "),s("li",[s("p",[t._v("AvailabilityFilteringRule\t可用过滤策略\t过滤掉一直连接失败并被标记为 circuit tripped 的 Server，过滤掉那些高并发连接的 Server（active connections 超过配置的网值）")])]),t._v(" "),s("li",[s("p",[t._v("WeightedResponseTimeRule 响应时间加权策略\t根据 Server 的响应时间分配权重。响应时间越长，权重越低，被选择到的概率就越低；响应时间越短，权重越高，被选择到的概率就越高。这个策略很贴切，综合了各种因素，如：网络、磁盘、IO等，这些因素直接影响着响应时间")])]),t._v(" "),s("li",[s("p",[t._v("ZoneAvoidanceRule\t区域权衡策略\t综合判断 Server 所在区域的性能和 Server 的可用性轮询选择 Server，并且判定一个 AWS Zone 的运行性能是否可用，剔除不可用的 Zone 中的所有 Server")])])]),t._v(" "),s("h2",{attrs:{id:"ribbon-的超时和超时重试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ribbon-的超时和超时重试"}},[t._v("#")]),t._v(" Ribbon 的超时和超时重试")]),t._v(" "),s("p",[t._v("理论上，Ribbon 是有超时设置，以及超时之后的重试功能的。但是，在 RestTemplate 和 Ribbon 结合的方案中，Ribbon 的超时设置和重试设置的配置方式一直在变动，因此有很多『配置无效』的现象，十分诡异。")]),t._v(" "),s("p",[t._v("考虑到我们在后续的项目中不会使用 RestTemplate 和 Ribbon 整合，而是使用 OpenFeign ，因此，这里就不展开解释了。")]),t._v(" "),s("h2",{attrs:{id:"ribbon-的饥饿加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ribbon-的饥饿加载"}},[t._v("#")]),t._v(" Ribbon 的饥饿加载")]),t._v(" "),s("p",[t._v("默认情况下，服务消费方调用服务提供方接口的时候，第一次请求会慢一些，甚至会超时，而之后的调用就没有问题了。")]),t._v(" "),s("p",[t._v("这是因为 Ribbon 进行客户端负载均衡的 Client 并不是在服务启动的时候就初始化好的，而是在调用的时候才会去创建相应的 Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，还包含了创建 RibbonClient 的时间，这样一来如果创建时间速度较慢，同时设置的超时时间又比较短的话，很容易就会出现上面所描述的现象。")]),t._v(" "),s("p",[t._v("你可以通过启用 Ribbon 的饥饿加载（即，立即加载）模式，并指定在项目启动时就要加载的服务：")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ribbon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eager-load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启饥饿加载")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clients")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" woniu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("provider(服务名)"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" xxx        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要饥饿加载的服务")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);